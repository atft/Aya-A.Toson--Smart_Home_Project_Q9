
Master Microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001016  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b8  00800060  00001016  000010aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800218  00800218  00001262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e69  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da9  00000000  00000000  00004331  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018d1  00000000  00000000  000050da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  000069ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c3  00000000  00000000  00006d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002076  00000000  00000000  0000761f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009695  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0f 05       	cpc	r16, r15
      56:	57 05       	cpc	r21, r7
      58:	e3 05       	cpc	r30, r3
      5a:	e9 05       	cpc	r30, r9
      5c:	ef 05       	cpc	r30, r15
      5e:	f5 05       	cpc	r31, r5
      60:	fb 05       	cpc	r31, r11
      62:	9f 05       	cpc	r25, r15
      64:	01 06       	cpc	r0, r17
      66:	0a 05       	cpc	r16, r10

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	e6 e1       	ldi	r30, 0x16	; 22
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 31       	cpi	r26, 0x18	; 24
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a8 e1       	ldi	r26, 0x18	; 24
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 31       	cpi	r26, 0x1B	; 27
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2c 03 	call	0x658	; 0x658 <main>
      9e:	0c 94 09 08 	jmp	0x1012	; 0x1012 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mdio_setPinStatus>:

		/*In case of PORTD*/
		case PORTD:
			
			/*Toggle a specified pin value in PORT*/
			MDIO_PORTD ^= au8_pin;						
      a6:	81 30       	cpi	r24, 0x01	; 1
      a8:	f9 f0       	breq	.+62     	; 0xe8 <mdio_setPinStatus+0x42>
      aa:	30 f0       	brcs	.+12     	; 0xb8 <mdio_setPinStatus+0x12>
      ac:	82 30       	cpi	r24, 0x02	; 2
      ae:	a1 f1       	breq	.+104    	; 0x118 <mdio_setPinStatus+0x72>
      b0:	83 30       	cpi	r24, 0x03	; 3
      b2:	09 f4       	brne	.+2      	; 0xb6 <mdio_setPinStatus+0x10>
      b4:	49 c0       	rjmp	.+146    	; 0x148 <mdio_setPinStatus+0xa2>
      b6:	08 95       	ret
      b8:	41 30       	cpi	r20, 0x01	; 1
      ba:	41 f0       	breq	.+16     	; 0xcc <mdio_setPinStatus+0x26>
      bc:	18 f0       	brcs	.+6      	; 0xc4 <mdio_setPinStatus+0x1e>
      be:	42 30       	cpi	r20, 0x02	; 2
      c0:	51 f0       	breq	.+20     	; 0xd6 <mdio_setPinStatus+0x30>
      c2:	08 95       	ret
      c4:	8a b3       	in	r24, 0x1a	; 26
      c6:	68 2b       	or	r22, r24
      c8:	6a bb       	out	0x1a, r22	; 26
      ca:	08 95       	ret
      cc:	8a b3       	in	r24, 0x1a	; 26
      ce:	60 95       	com	r22
      d0:	68 23       	and	r22, r24
      d2:	6a bb       	out	0x1a, r22	; 26
      d4:	08 95       	ret
      d6:	8a b3       	in	r24, 0x1a	; 26
      d8:	96 2f       	mov	r25, r22
      da:	90 95       	com	r25
      dc:	89 23       	and	r24, r25
      de:	8a bb       	out	0x1a, r24	; 26
      e0:	8b b3       	in	r24, 0x1b	; 27
      e2:	68 2b       	or	r22, r24
      e4:	6b bb       	out	0x1b, r22	; 27
      e6:	08 95       	ret
      e8:	41 30       	cpi	r20, 0x01	; 1
      ea:	41 f0       	breq	.+16     	; 0xfc <mdio_setPinStatus+0x56>
      ec:	18 f0       	brcs	.+6      	; 0xf4 <mdio_setPinStatus+0x4e>
      ee:	42 30       	cpi	r20, 0x02	; 2
      f0:	51 f0       	breq	.+20     	; 0x106 <mdio_setPinStatus+0x60>
      f2:	08 95       	ret
      f4:	87 b3       	in	r24, 0x17	; 23
      f6:	68 2b       	or	r22, r24
      f8:	67 bb       	out	0x17, r22	; 23
      fa:	08 95       	ret
      fc:	87 b3       	in	r24, 0x17	; 23
      fe:	60 95       	com	r22
     100:	68 23       	and	r22, r24
     102:	67 bb       	out	0x17, r22	; 23
     104:	08 95       	ret
     106:	87 b3       	in	r24, 0x17	; 23
     108:	96 2f       	mov	r25, r22
     10a:	90 95       	com	r25
     10c:	89 23       	and	r24, r25
     10e:	87 bb       	out	0x17, r24	; 23
     110:	88 b3       	in	r24, 0x18	; 24
     112:	68 2b       	or	r22, r24
     114:	68 bb       	out	0x18, r22	; 24
     116:	08 95       	ret
     118:	41 30       	cpi	r20, 0x01	; 1
     11a:	41 f0       	breq	.+16     	; 0x12c <mdio_setPinStatus+0x86>
     11c:	18 f0       	brcs	.+6      	; 0x124 <mdio_setPinStatus+0x7e>
     11e:	42 30       	cpi	r20, 0x02	; 2
     120:	51 f0       	breq	.+20     	; 0x136 <mdio_setPinStatus+0x90>
     122:	08 95       	ret
     124:	84 b3       	in	r24, 0x14	; 20
     126:	68 2b       	or	r22, r24
     128:	64 bb       	out	0x14, r22	; 20
     12a:	08 95       	ret
     12c:	84 b3       	in	r24, 0x14	; 20
     12e:	60 95       	com	r22
     130:	68 23       	and	r22, r24
     132:	64 bb       	out	0x14, r22	; 20
     134:	08 95       	ret
     136:	84 b3       	in	r24, 0x14	; 20
     138:	96 2f       	mov	r25, r22
     13a:	90 95       	com	r25
     13c:	89 23       	and	r24, r25
     13e:	84 bb       	out	0x14, r24	; 20
     140:	85 b3       	in	r24, 0x15	; 21
     142:	68 2b       	or	r22, r24
     144:	65 bb       	out	0x15, r22	; 21
     146:	08 95       	ret
     148:	41 30       	cpi	r20, 0x01	; 1
     14a:	41 f0       	breq	.+16     	; 0x15c <mdio_setPinStatus+0xb6>
     14c:	18 f0       	brcs	.+6      	; 0x154 <mdio_setPinStatus+0xae>
     14e:	42 30       	cpi	r20, 0x02	; 2
     150:	51 f0       	breq	.+20     	; 0x166 <mdio_setPinStatus+0xc0>
     152:	08 95       	ret
     154:	81 b3       	in	r24, 0x11	; 17
     156:	68 2b       	or	r22, r24
     158:	61 bb       	out	0x11, r22	; 17
     15a:	08 95       	ret
     15c:	81 b3       	in	r24, 0x11	; 17
     15e:	60 95       	com	r22
     160:	68 23       	and	r22, r24
     162:	61 bb       	out	0x11, r22	; 17
     164:	08 95       	ret
     166:	81 b3       	in	r24, 0x11	; 17
     168:	96 2f       	mov	r25, r22
     16a:	90 95       	com	r25
     16c:	89 23       	and	r24, r25
     16e:	81 bb       	out	0x11, r24	; 17
     170:	82 b3       	in	r24, 0x12	; 18
     172:	68 2b       	or	r22, r24
     174:	62 bb       	out	0x12, r22	; 18
     176:	08 95       	ret

00000178 <mdio_setPinValue>:
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	a1 f0       	breq	.+40     	; 0x1a4 <mdio_setPinValue+0x2c>
     17c:	28 f0       	brcs	.+10     	; 0x188 <mdio_setPinValue+0x10>
     17e:	82 30       	cpi	r24, 0x02	; 2
     180:	f9 f0       	breq	.+62     	; 0x1c0 <mdio_setPinValue+0x48>
     182:	83 30       	cpi	r24, 0x03	; 3
     184:	59 f1       	breq	.+86     	; 0x1dc <mdio_setPinValue+0x64>
     186:	08 95       	ret
     188:	44 23       	and	r20, r20
     18a:	19 f0       	breq	.+6      	; 0x192 <mdio_setPinValue+0x1a>
     18c:	41 30       	cpi	r20, 0x01	; 1
     18e:	31 f0       	breq	.+12     	; 0x19c <mdio_setPinValue+0x24>
     190:	08 95       	ret
     192:	8b b3       	in	r24, 0x1b	; 27
     194:	60 95       	com	r22
     196:	68 23       	and	r22, r24
     198:	6b bb       	out	0x1b, r22	; 27
     19a:	08 95       	ret
     19c:	8b b3       	in	r24, 0x1b	; 27
     19e:	68 2b       	or	r22, r24
     1a0:	6b bb       	out	0x1b, r22	; 27
     1a2:	08 95       	ret
     1a4:	44 23       	and	r20, r20
     1a6:	19 f0       	breq	.+6      	; 0x1ae <mdio_setPinValue+0x36>
     1a8:	41 30       	cpi	r20, 0x01	; 1
     1aa:	31 f0       	breq	.+12     	; 0x1b8 <mdio_setPinValue+0x40>
     1ac:	08 95       	ret
     1ae:	88 b3       	in	r24, 0x18	; 24
     1b0:	60 95       	com	r22
     1b2:	68 23       	and	r22, r24
     1b4:	68 bb       	out	0x18, r22	; 24
     1b6:	08 95       	ret
     1b8:	88 b3       	in	r24, 0x18	; 24
     1ba:	68 2b       	or	r22, r24
     1bc:	68 bb       	out	0x18, r22	; 24
     1be:	08 95       	ret
     1c0:	44 23       	and	r20, r20
     1c2:	19 f0       	breq	.+6      	; 0x1ca <mdio_setPinValue+0x52>
     1c4:	41 30       	cpi	r20, 0x01	; 1
     1c6:	31 f0       	breq	.+12     	; 0x1d4 <mdio_setPinValue+0x5c>
     1c8:	08 95       	ret
     1ca:	85 b3       	in	r24, 0x15	; 21
     1cc:	60 95       	com	r22
     1ce:	68 23       	and	r22, r24
     1d0:	65 bb       	out	0x15, r22	; 21
     1d2:	08 95       	ret
     1d4:	85 b3       	in	r24, 0x15	; 21
     1d6:	68 2b       	or	r22, r24
     1d8:	65 bb       	out	0x15, r22	; 21
     1da:	08 95       	ret
     1dc:	44 23       	and	r20, r20
     1de:	19 f0       	breq	.+6      	; 0x1e6 <mdio_setPinValue+0x6e>
     1e0:	41 30       	cpi	r20, 0x01	; 1
     1e2:	31 f0       	breq	.+12     	; 0x1f0 <mdio_setPinValue+0x78>
     1e4:	08 95       	ret
     1e6:	82 b3       	in	r24, 0x12	; 18
     1e8:	60 95       	com	r22
     1ea:	68 23       	and	r22, r24
     1ec:	62 bb       	out	0x12, r22	; 18
     1ee:	08 95       	ret
     1f0:	82 b3       	in	r24, 0x12	; 18
     1f2:	68 2b       	or	r22, r24
     1f4:	62 bb       	out	0x12, r22	; 18
     1f6:	08 95       	ret

000001f8 <mdio_getPinValue>:
{
	/*A local variable is used  to carry the current pin value*/
	u8_t au8_pinValue = 0;

	/*Switching over GPIO Ports*/
	switch(au8_port)
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	61 f0       	breq	.+24     	; 0x214 <mdio_getPinValue+0x1c>
     1fc:	28 f0       	brcs	.+10     	; 0x208 <mdio_getPinValue+0x10>
     1fe:	82 30       	cpi	r24, 0x02	; 2
     200:	79 f0       	breq	.+30     	; 0x220 <mdio_getPinValue+0x28>
     202:	83 30       	cpi	r24, 0x03	; 3
     204:	99 f0       	breq	.+38     	; 0x22c <mdio_getPinValue+0x34>
     206:	18 c0       	rjmp	.+48     	; 0x238 <mdio_getPinValue+0x40>
	{
		/*In case of PORTA*/
		case PORTA:
			
			/*Checking the current value of the specified pin in PIN*/
			if(MDIO_PINA & au8_pin)
     208:	89 b3       	in	r24, 0x19	; 25
}

u8_t mdio_getPinValue(u8_t au8_port, u8_t au8_pin)
{
	/*A local variable is used  to carry the current pin value*/
	u8_t au8_pinValue = 0;
     20a:	68 23       	and	r22, r24
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	a9 f4       	brne	.+42     	; 0x23a <mdio_getPinValue+0x42>
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	08 95       	ret

		/*In case of PORTB*/
		case PORTB:
			
			/*Checking the current value of the specified pin in PIN*/
			if(MDIO_PINB & au8_pin)
     214:	86 b3       	in	r24, 0x16	; 22
}

u8_t mdio_getPinValue(u8_t au8_port, u8_t au8_pin)
{
	/*A local variable is used  to carry the current pin value*/
	u8_t au8_pinValue = 0;
     216:	68 23       	and	r22, r24
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	79 f4       	brne	.+30     	; 0x23a <mdio_getPinValue+0x42>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	08 95       	ret

		/*In case of PORTC*/
		case PORTC:
			
			/*Checking the current value of the specified pin in PIN*/
			if(MDIO_PINC & au8_pin)
     220:	83 b3       	in	r24, 0x13	; 19
}

u8_t mdio_getPinValue(u8_t au8_port, u8_t au8_pin)
{
	/*A local variable is used  to carry the current pin value*/
	u8_t au8_pinValue = 0;
     222:	68 23       	and	r22, r24
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	49 f4       	brne	.+18     	; 0x23a <mdio_getPinValue+0x42>
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	08 95       	ret

		/*In case of PORTD*/
		case PORTD:
			
			/*Checking the current value of the specified pin in PIN*/
			if(MDIO_PIND & au8_pin)
     22c:	80 b3       	in	r24, 0x10	; 16
}

u8_t mdio_getPinValue(u8_t au8_port, u8_t au8_pin)
{
	/*A local variable is used  to carry the current pin value*/
	u8_t au8_pinValue = 0;
     22e:	68 23       	and	r22, r24
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	19 f4       	brne	.+6      	; 0x23a <mdio_getPinValue+0x42>
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	08 95       	ret
     238:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	/*Return the current pin value*/
	return au8_pinValue;
     23a:	08 95       	ret

0000023c <EEPROM_ui8ReadByteFromAddress>:
/*                          Functions' definitions                      */
/************************************************************************/
u8_t EEPROM_ui8ReadByteFromAddress(const u16_t u16Address)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     23c:	e1 99       	sbic	0x1c, 1	; 28
     23e:	fe cf       	rjmp	.-4      	; 0x23c <EEPROM_ui8ReadByteFromAddress>
	;
	/* Set up address register */
	EEAR = u16Address;
     240:	9f bb       	out	0x1f, r25	; 31
     242:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
     244:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     246:	8d b3       	in	r24, 0x1d	; 29
}
     248:	08 95       	ret

0000024a <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const u16_t uiAddress, u8_t* dist,const u16_t size)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     24a:	e1 99       	sbic	0x1c, 1	; 28
     24c:	fe cf       	rjmp	.-4      	; 0x24a <EEPROM_vReadBlockFromAddress>
	;

	u16_t counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     24e:	41 15       	cp	r20, r1
     250:	51 05       	cpc	r21, r1
     252:	91 f0       	breq	.+36     	; 0x278 <EEPROM_vReadBlockFromAddress+0x2e>
     254:	46 0f       	add	r20, r22
     256:	57 1f       	adc	r21, r23
     258:	fb 01       	movw	r30, r22
     25a:	9c 01       	movw	r18, r24
     25c:	26 1b       	sub	r18, r22
     25e:	37 0b       	sbc	r19, r23
     260:	b9 01       	movw	r22, r18
     262:	9b 01       	movw	r18, r22
     264:	2e 0f       	add	r18, r30
     266:	3f 1f       	adc	r19, r31
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
     268:	3f bb       	out	0x1f, r19	; 31
     26a:	2e bb       	out	0x1e, r18	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
     26c:	e0 9a       	sbi	0x1c, 0	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
     26e:	9d b3       	in	r25, 0x1d	; 29
     270:	91 93       	st	Z+, r25
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	u16_t counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     272:	e4 17       	cp	r30, r20
     274:	f5 07       	cpc	r31, r21
     276:	a9 f7       	brne	.-22     	; 0x262 <EEPROM_vReadBlockFromAddress+0x18>
     278:	08 95       	ret

0000027a <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16_t uiAddress, const u8_t uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     27a:	e1 99       	sbic	0x1c, 1	; 28
     27c:	fe cf       	rjmp	.-4      	; 0x27a <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
     27e:	9f bb       	out	0x1f, r25	; 31
     280:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
     282:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
     284:	8d b3       	in	r24, 0x1d	; 29
     286:	86 17       	cp	r24, r22
     288:	19 f0       	breq	.+6      	; 0x290 <EEPROM_vWriteByteToAddress+0x16>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
     28a:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
     28c:	e2 9a       	sbi	0x1c, 2	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
     28e:	e1 9a       	sbi	0x1c, 1	; 28
     290:	08 95       	ret

00000292 <EEPROM_vWriteBlockToAddress>:
}

void EEPROM_vWriteBlockToAddress(const u16_t uiAddress, const u8_t* uiData,const u16_t size)
{
	u16_t counter = 0;//Bytes write counter
	while (counter < size)
     292:	41 15       	cp	r20, r1
     294:	51 05       	cpc	r21, r1
     296:	c9 f0       	breq	.+50     	; 0x2ca <EEPROM_vWriteBlockToAddress+0x38>
     298:	46 0f       	add	r20, r22
     29a:	57 1f       	adc	r21, r23
     29c:	fb 01       	movw	r30, r22
     29e:	9c 01       	movw	r18, r24
     2a0:	26 1b       	sub	r18, r22
     2a2:	37 0b       	sbc	r19, r23
     2a4:	b9 01       	movw	r22, r18
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     2a6:	e1 99       	sbic	0x1c, 1	; 28
     2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <EEPROM_vWriteBlockToAddress+0x14>
     2aa:	9b 01       	movw	r18, r22
     2ac:	2e 0f       	add	r18, r30
     2ae:	3f 1f       	adc	r19, r31
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
     2b0:	3f bb       	out	0x1f, r19	; 31
     2b2:	2e bb       	out	0x1e, r18	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
     2b4:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
     2b6:	2d b3       	in	r18, 0x1d	; 29
     2b8:	91 91       	ld	r25, Z+
     2ba:	29 17       	cp	r18, r25
     2bc:	19 f0       	breq	.+6      	; 0x2c4 <EEPROM_vWriteBlockToAddress+0x32>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
     2be:	9d bb       	out	0x1d, r25	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
     2c0:	e2 9a       	sbi	0x1c, 2	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
     2c2:	e1 9a       	sbi	0x1c, 1	; 28
}

void EEPROM_vWriteBlockToAddress(const u16_t uiAddress, const u8_t* uiData,const u16_t size)
{
	u16_t counter = 0;//Bytes write counter
	while (counter < size)
     2c4:	e4 17       	cp	r30, r20
     2c6:	f5 07       	cpc	r31, r21
     2c8:	71 f7       	brne	.-36     	; 0x2a6 <EEPROM_vWriteBlockToAddress+0x14>
     2ca:	08 95       	ret

000002cc <hkpd_init>:
/************************************************************************/

void hkpd_init(void)
{
	/*Setting the columns' pins to output*/
	mdio_setPinStatus(HKPD_COLS_PORT, (HKPD_COL0_PIN | HKPD_COL1_PIN | HKPD_COL2_PIN), OUTPUT);
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	67 e0       	ldi	r22, 0x07	; 7
     2d0:	83 e0       	ldi	r24, 0x03	; 3
     2d2:	0e 94 53 00 	call	0xa6	; 0xa6 <mdio_setPinStatus>

	/*Setting the rows' pins to input and enable pull-up resistor*/
	mdio_setPinStatus(HKPD_ROWS_PORT, (HKPD_ROW0_PIN | HKPD_ROW1_PIN | HKPD_ROW2_PIN | HKPD_ROW3_PIN), INPUT_PULLUP);
     2d6:	42 e0       	ldi	r20, 0x02	; 2
     2d8:	68 e7       	ldi	r22, 0x78	; 120
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	0e 94 53 00 	call	0xa6	; 0xa6 <mdio_setPinStatus>
	
	/*Setting the columns' pin to output high*/
	mdio_setPinValue(HKPD_COLS_PORT, (HKPD_COL0_PIN | HKPD_COL1_PIN | HKPD_COL2_PIN), HIGH);
     2e0:	41 e0       	ldi	r20, 0x01	; 1
     2e2:	67 e0       	ldi	r22, 0x07	; 7
     2e4:	83 e0       	ldi	r24, 0x03	; 3
     2e6:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     2ea:	08 95       	ret

000002ec <hkpd_getPressed>:
	/*Return from this function*/
	return;
}

u8_t hkpd_getPressed(void)
{
     2ec:	5f 92       	push	r5
     2ee:	6f 92       	push	r6
     2f0:	7f 92       	push	r7
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	c0 e0       	ldi	r28, 0x00	; 0
     30c:	d0 e0       	ldi	r29, 0x00	; 0
	
	/*Looping over columns' pins*/
	for(au8_col_looping_var = 0; au8_col_looping_var < HKPD_COL_NUM; au8_col_looping_var++)
	{
		/*Set the selected column pin to LOW*/
		mdio_setPinValue(HKPD_COLS_PORT, (HKPD_COL0_PIN << au8_col_looping_var), LOW);
     30e:	aa 24       	eor	r10, r10
     310:	a3 94       	inc	r10
     312:	b1 2c       	mov	r11, r1
		
		/*Looping over rows' pins*/
		for(au8_row_looping_var = 0; au8_row_looping_var < HKPD_ROW_NUM; au8_row_looping_var++)
		{
			/*Checking if any row pin value is LOW*/
			if(mdio_getPinValue(HKPD_ROWS_PORT, (HKPD_ROW0_PIN << au8_row_looping_var)) == LOW)
     314:	68 94       	set
     316:	cc 24       	eor	r12, r12
     318:	c3 f8       	bld	r12, 3
     31a:	d1 2c       	mov	r13, r1
	
	/*Looping over columns' pins*/
	for(au8_col_looping_var = 0; au8_col_looping_var < HKPD_COL_NUM; au8_col_looping_var++)
	{
		/*Set the selected column pin to LOW*/
		mdio_setPinValue(HKPD_COLS_PORT, (HKPD_COL0_PIN << au8_col_looping_var), LOW);
     31c:	4e 01       	movw	r8, r28
     31e:	75 01       	movw	r14, r10
     320:	0c 2e       	mov	r0, r28
     322:	02 c0       	rjmp	.+4      	; 0x328 <hkpd_getPressed+0x3c>
     324:	ee 0c       	add	r14, r14
     326:	ff 1c       	adc	r15, r15
     328:	0a 94       	dec	r0
     32a:	e2 f7       	brpl	.-8      	; 0x324 <hkpd_getPressed+0x38>
     32c:	5e 2c       	mov	r5, r14
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	6e 2d       	mov	r22, r14
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     338:	61 2c       	mov	r6, r1
     33a:	71 2c       	mov	r7, r1
		
		/*Looping over rows' pins*/
		for(au8_row_looping_var = 0; au8_row_looping_var < HKPD_ROW_NUM; au8_row_looping_var++)
		{
			/*Checking if any row pin value is LOW*/
			if(mdio_getPinValue(HKPD_ROWS_PORT, (HKPD_ROW0_PIN << au8_row_looping_var)) == LOW)
     33c:	83 01       	movw	r16, r6
     33e:	b6 01       	movw	r22, r12
     340:	06 2c       	mov	r0, r6
     342:	02 c0       	rjmp	.+4      	; 0x348 <hkpd_getPressed+0x5c>
     344:	66 0f       	add	r22, r22
     346:	77 1f       	adc	r23, r23
     348:	0a 94       	dec	r0
     34a:	e2 f7       	brpl	.-8      	; 0x344 <hkpd_getPressed+0x58>
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <mdio_getPinValue>
     352:	81 11       	cpse	r24, r1
     354:	1a c0       	rjmp	.+52     	; 0x38a <hkpd_getPressed+0x9e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	96 e7       	ldi	r25, 0x76	; 118
     35a:	21 e0       	ldi	r18, 0x01	; 1
     35c:	81 50       	subi	r24, 0x01	; 1
     35e:	90 40       	sbci	r25, 0x00	; 0
     360:	20 40       	sbci	r18, 0x00	; 0
     362:	e1 f7       	brne	.-8      	; 0x35c <hkpd_getPressed+0x70>
     364:	00 c0       	rjmp	.+0      	; 0x366 <hkpd_getPressed+0x7a>
     366:	00 00       	nop
			{
				/*Wait for 30ms to de-bounce the pressed key*/
				_delay_ms(30);
				
				/*Return the pressed key value*/
				pu8_pressedKey = gu8_kpd_arr[au8_row_looping_var][au8_col_looping_var];
     368:	c3 01       	movw	r24, r6
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	08 0f       	add	r16, r24
     370:	19 1f       	adc	r17, r25
     372:	00 5a       	subi	r16, 0xA0	; 160
     374:	1f 4f       	sbci	r17, 0xFF	; 255
     376:	f8 01       	movw	r30, r16
     378:	e8 0d       	add	r30, r8
     37a:	f9 1d       	adc	r31, r9
     37c:	c0 81       	ld	r28, Z
				/*Do nothing*/
			}
		}
		
		/*Set the selected column pin to HIGH*/
		mdio_setPinValue(HKPD_COLS_PORT, (HKPD_COL0_PIN << au8_col_looping_var), HIGH);
     37e:	41 e0       	ldi	r20, 0x01	; 1
     380:	65 2d       	mov	r22, r5
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     388:	12 c0       	rjmp	.+36     	; 0x3ae <hkpd_getPressed+0xc2>
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	68 1a       	sub	r6, r24
     38e:	78 0a       	sbc	r7, r24
	{
		/*Set the selected column pin to LOW*/
		mdio_setPinValue(HKPD_COLS_PORT, (HKPD_COL0_PIN << au8_col_looping_var), LOW);
		
		/*Looping over rows' pins*/
		for(au8_row_looping_var = 0; au8_row_looping_var < HKPD_ROW_NUM; au8_row_looping_var++)
     390:	94 e0       	ldi	r25, 0x04	; 4
     392:	69 16       	cp	r6, r25
     394:	71 04       	cpc	r7, r1
     396:	91 f6       	brne	.-92     	; 0x33c <hkpd_getPressed+0x50>
				/*Do nothing*/
			}
		}
		
		/*Set the selected column pin to HIGH*/
		mdio_setPinValue(HKPD_COLS_PORT, (HKPD_COL0_PIN << au8_col_looping_var), HIGH);
     398:	41 e0       	ldi	r20, 0x01	; 1
     39a:	6e 2d       	mov	r22, r14
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     3a2:	21 96       	adiw	r28, 0x01	; 1
	u8_t au8_pressedFlag = 0;

	u8_t pu8_pressedKey = NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
	
	/*Looping over columns' pins*/
	for(au8_col_looping_var = 0; au8_col_looping_var < HKPD_COL_NUM; au8_col_looping_var++)
     3a4:	c3 30       	cpi	r28, 0x03	; 3
     3a6:	d1 05       	cpc	r29, r1
     3a8:	09 f0       	breq	.+2      	; 0x3ac <hkpd_getPressed+0xc0>
     3aa:	b8 cf       	rjmp	.-144    	; 0x31c <hkpd_getPressed+0x30>
     3ac:	cf ef       	ldi	r28, 0xFF	; 255
		}
	}
			
	/*Return from this function*/
	return pu8_pressedKey;
     3ae:	8c 2f       	mov	r24, r28
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	df 90       	pop	r13
     3be:	cf 90       	pop	r12
     3c0:	bf 90       	pop	r11
     3c2:	af 90       	pop	r10
     3c4:	9f 90       	pop	r9
     3c6:	8f 90       	pop	r8
     3c8:	7f 90       	pop	r7
     3ca:	6f 90       	pop	r6
     3cc:	5f 90       	pop	r5
     3ce:	08 95       	ret

000003d0 <hlcd_latch>:
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	68 e0       	ldi	r22, 0x08	; 8
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     3da:	87 ec       	ldi	r24, 0xC7	; 199
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <hlcd_latch+0xe>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <hlcd_latch+0x14>
     3e4:	00 00       	nop
     3e6:	41 e0       	ldi	r20, 0x01	; 1
     3e8:	68 e0       	ldi	r22, 0x08	; 8
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     3f0:	08 95       	ret

000003f2 <hlcd_sendCMD>:
     3f2:	cf 93       	push	r28
     3f4:	c8 2f       	mov	r28, r24
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	64 e0       	ldi	r22, 0x04	; 4
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	62 e0       	ldi	r22, 0x02	; 2
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     40a:	4c 2f       	mov	r20, r28
     40c:	44 1f       	adc	r20, r20
     40e:	44 27       	eor	r20, r20
     410:	44 1f       	adc	r20, r20
     412:	60 e8       	ldi	r22, 0x80	; 128
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     41a:	c6 fb       	bst	r28, 6
     41c:	44 27       	eor	r20, r20
     41e:	40 f9       	bld	r20, 0
     420:	60 e4       	ldi	r22, 0x40	; 64
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     428:	c5 fb       	bst	r28, 5
     42a:	44 27       	eor	r20, r20
     42c:	40 f9       	bld	r20, 0
     42e:	60 e2       	ldi	r22, 0x20	; 32
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     436:	c4 fb       	bst	r28, 4
     438:	44 27       	eor	r20, r20
     43a:	40 f9       	bld	r20, 0
     43c:	60 e1       	ldi	r22, 0x10	; 16
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     444:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <hlcd_latch>
     448:	c3 fb       	bst	r28, 3
     44a:	44 27       	eor	r20, r20
     44c:	40 f9       	bld	r20, 0
     44e:	60 e8       	ldi	r22, 0x80	; 128
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     456:	c2 fb       	bst	r28, 2
     458:	44 27       	eor	r20, r20
     45a:	40 f9       	bld	r20, 0
     45c:	60 e4       	ldi	r22, 0x40	; 64
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     464:	c1 fb       	bst	r28, 1
     466:	44 27       	eor	r20, r20
     468:	40 f9       	bld	r20, 0
     46a:	60 e2       	ldi	r22, 0x20	; 32
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     472:	4c 2f       	mov	r20, r28
     474:	41 70       	andi	r20, 0x01	; 1
     476:	60 e1       	ldi	r22, 0x10	; 16
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     47e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <hlcd_latch>
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <hlcd_sendData>:
     486:	cf 93       	push	r28
     488:	c8 2f       	mov	r28, r24
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	64 e0       	ldi	r22, 0x04	; 4
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     494:	41 e0       	ldi	r20, 0x01	; 1
     496:	62 e0       	ldi	r22, 0x02	; 2
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     49e:	4c 2f       	mov	r20, r28
     4a0:	44 1f       	adc	r20, r20
     4a2:	44 27       	eor	r20, r20
     4a4:	44 1f       	adc	r20, r20
     4a6:	60 e8       	ldi	r22, 0x80	; 128
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     4ae:	c6 fb       	bst	r28, 6
     4b0:	44 27       	eor	r20, r20
     4b2:	40 f9       	bld	r20, 0
     4b4:	60 e4       	ldi	r22, 0x40	; 64
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     4bc:	c5 fb       	bst	r28, 5
     4be:	44 27       	eor	r20, r20
     4c0:	40 f9       	bld	r20, 0
     4c2:	60 e2       	ldi	r22, 0x20	; 32
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     4ca:	c4 fb       	bst	r28, 4
     4cc:	44 27       	eor	r20, r20
     4ce:	40 f9       	bld	r20, 0
     4d0:	60 e1       	ldi	r22, 0x10	; 16
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     4d8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <hlcd_latch>
     4dc:	c3 fb       	bst	r28, 3
     4de:	44 27       	eor	r20, r20
     4e0:	40 f9       	bld	r20, 0
     4e2:	60 e8       	ldi	r22, 0x80	; 128
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     4ea:	c2 fb       	bst	r28, 2
     4ec:	44 27       	eor	r20, r20
     4ee:	40 f9       	bld	r20, 0
     4f0:	60 e4       	ldi	r22, 0x40	; 64
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     4f8:	c1 fb       	bst	r28, 1
     4fa:	44 27       	eor	r20, r20
     4fc:	40 f9       	bld	r20, 0
     4fe:	60 e2       	ldi	r22, 0x20	; 32
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     506:	4c 2f       	mov	r20, r28
     508:	41 70       	andi	r20, 0x01	; 1
     50a:	60 e1       	ldi	r22, 0x10	; 16
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     512:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <hlcd_latch>
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <hlcd_init>:
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	60 ef       	ldi	r22, 0xF0	; 240
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 53 00 	call	0xa6	; 0xa6 <mdio_setPinStatus>
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	6e e0       	ldi	r22, 0x0E	; 14
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	0e 94 53 00 	call	0xa6	; 0xa6 <mdio_setPinStatus>
     52e:	41 e0       	ldi	r20, 0x01	; 1
     530:	68 e0       	ldi	r22, 0x08	; 8
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     538:	2f ef       	ldi	r18, 0xFF	; 255
     53a:	80 e7       	ldi	r24, 0x70	; 112
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	21 50       	subi	r18, 0x01	; 1
     540:	80 40       	sbci	r24, 0x00	; 0
     542:	90 40       	sbci	r25, 0x00	; 0
     544:	e1 f7       	brne	.-8      	; 0x53e <hlcd_init+0x24>
     546:	00 c0       	rjmp	.+0      	; 0x548 <hlcd_init+0x2e>
     548:	00 00       	nop
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	64 e0       	ldi	r22, 0x04	; 4
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	62 e0       	ldi	r22, 0x02	; 2
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     55e:	40 e0       	ldi	r20, 0x00	; 0
     560:	60 e8       	ldi	r22, 0x80	; 128
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	60 e4       	ldi	r22, 0x40	; 64
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     572:	41 e0       	ldi	r20, 0x01	; 1
     574:	60 e2       	ldi	r22, 0x20	; 32
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	60 e1       	ldi	r22, 0x10	; 16
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 bc 00 	call	0x178	; 0x178 <mdio_setPinValue>
     586:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <hlcd_latch>
     58a:	8c e2       	ldi	r24, 0x2C	; 44
     58c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <hlcd_sendCMD>
     590:	8f e9       	ldi	r24, 0x9F	; 159
     592:	9f e0       	ldi	r25, 0x0F	; 15
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <hlcd_init+0x7a>
     598:	00 c0       	rjmp	.+0      	; 0x59a <hlcd_init+0x80>
     59a:	00 00       	nop
     59c:	8f e0       	ldi	r24, 0x0F	; 15
     59e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <hlcd_sendCMD>
     5a2:	8f e9       	ldi	r24, 0x9F	; 159
     5a4:	9f e0       	ldi	r25, 0x0F	; 15
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <hlcd_init+0x8c>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <hlcd_init+0x92>
     5ac:	00 00       	nop
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <hlcd_sendCMD>
     5b4:	8f e3       	ldi	r24, 0x3F	; 63
     5b6:	9f e1       	ldi	r25, 0x1F	; 31
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <hlcd_init+0x9e>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <hlcd_init+0xa4>
     5be:	00 00       	nop
     5c0:	86 e0       	ldi	r24, 0x06	; 6
     5c2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <hlcd_sendCMD>
     5c6:	8f e9       	ldi	r24, 0x9F	; 159
     5c8:	9f e0       	ldi	r25, 0x0F	; 15
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <hlcd_init+0xb0>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <hlcd_init+0xb6>
     5d0:	00 00       	nop
     5d2:	08 95       	ret

000005d4 <hlcd_writeChar>:
     5d4:	0e 94 43 02 	call	0x486	; 0x486 <hlcd_sendData>
     5d8:	08 95       	ret

000005da <hlcd_writeString>:
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
     5e0:	88 81       	ld	r24, Y
     5e2:	88 23       	and	r24, r24
     5e4:	31 f0       	breq	.+12     	; 0x5f2 <hlcd_writeString+0x18>
     5e6:	21 96       	adiw	r28, 0x01	; 1
     5e8:	0e 94 43 02 	call	0x486	; 0x486 <hlcd_sendData>
     5ec:	89 91       	ld	r24, Y+
     5ee:	81 11       	cpse	r24, r1
     5f0:	fb cf       	rjmp	.-10     	; 0x5e8 <hlcd_writeString+0xe>
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <hlcd_clearLCD>:
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <hlcd_sendCMD>
     5fe:	8f e3       	ldi	r24, 0x3F	; 63
     600:	9f e1       	ldi	r25, 0x1F	; 31
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	f1 f7       	brne	.-4      	; 0x602 <hlcd_clearLCD+0xa>
     606:	00 c0       	rjmp	.+0      	; 0x608 <hlcd_clearLCD+0x10>
     608:	00 00       	nop
     60a:	08 95       	ret

0000060c <hlcd_setCursor>:
{
	
	u8_t au8_position = 0;
	
	/* in case of wrong input set the cursor to the first position of the LCD*/
	if(au8_row>1||au8_row<0||au8_col>15||au8_col<0)
     60c:	82 30       	cpi	r24, 0x02	; 2
     60e:	10 f4       	brcc	.+4      	; 0x614 <hlcd_setCursor+0x8>
     610:	60 31       	cpi	r22, 0x10	; 16
     612:	50 f0       	brcs	.+20     	; 0x628 <hlcd_setCursor+0x1c>
	{
		/* Return cursor home */
		hlcd_sendCMD(0x02);
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <hlcd_sendCMD>
     61a:	8f e3       	ldi	r24, 0x3F	; 63
     61c:	9f e1       	ldi	r25, 0x1F	; 31
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <hlcd_setCursor+0x12>
     622:	00 c0       	rjmp	.+0      	; 0x624 <hlcd_setCursor+0x18>
     624:	00 00       	nop
     626:	08 95       	ret
		/*Delay for 2 millisecond*/
		_delay_ms(2);
	}
	else{
	/* first of all calculate the required position */
	switch (au8_row)
     628:	88 23       	and	r24, r24
     62a:	29 f0       	breq	.+10     	; 0x636 <hlcd_setCursor+0x2a>
     62c:	81 30       	cpi	r24, 0x01	; 1
     62e:	11 f4       	brne	.+4      	; 0x634 <hlcd_setCursor+0x28>
	{
	case 0:
		au8_position = au8_col;
		break;
	case 1:
		au8_position = au8_col + 0x40;
     630:	60 5c       	subi	r22, 0xC0	; 192
		break;
     632:	01 c0       	rjmp	.+2      	; 0x636 <hlcd_setCursor+0x2a>
}

void hlcd_setCursor(u8_t au8_row , u8_t au8_col)
{
	
	u8_t au8_position = 0;
     634:	60 e0       	ldi	r22, 0x00	; 0
		break;
	}

	/* to write to a specific address in the LCD(write to DDRAM address) *
	 * we need to apply the corresponding command 0b10000000+position    */
	hlcd_sendCMD(au8_position | 0x80);
     636:	86 2f       	mov	r24, r22
     638:	80 68       	ori	r24, 0x80	; 128
     63a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <hlcd_sendCMD>
     63e:	8f e3       	ldi	r24, 0x3F	; 63
     640:	9f e1       	ldi	r25, 0x1F	; 31
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <hlcd_setCursor+0x36>
     646:	00 c0       	rjmp	.+0      	; 0x648 <hlcd_setCursor+0x3c>
     648:	00 00       	nop
     64a:	08 95       	ret

0000064c <LED_vInit>:
/************************************************************************/
/*                          Functions' definitions                      */
/************************************************************************/
void LED_vInit(u8_t portname,u8_t pinnumber)
{
	mdio_setPinStatus(portname,pinnumber,OUTPUT);//Set the given pin in the given port as an output
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	0e 94 53 00 	call	0xa6	; 0xa6 <mdio_setPinStatus>
     652:	08 95       	ret

00000654 <LED_vTurnOn>:
}
void LED_vTurnOn(u8_t portname,u8_t pinnumber)
{
     654:	08 95       	ret

00000656 <LED_vTurnOff>:
	SET_BIT(portname,pinnumber);//Set the given pin in the given port to one(on)
}
void LED_vTurnOff(u8_t portname,u8_t pinnumber)
{
     656:	08 95       	ret

00000658 <main>:
volatile u16_t session_counter = 0;//Counts session time
u8_t session_timeout = FALSE;//Indicates session status


int main(void)
{
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	28 97       	sbiw	r28, 0x08	; 8
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
	u8_t block_mode = FALSE;//Is true if the login is blocked or false if not blocked
	u8_t key_pressed = NOT_PRESSED;//


	/*****************  INITIALIZE  ***********************/
	LED_vInit(HLED_PORT,HLED_LOGIN);//initializes the led of login
     66c:	85 b3       	in	r24, 0x15	; 21
     66e:	62 e0       	ldi	r22, 0x02	; 2
     670:	0e 94 26 03 	call	0x64c	; 0x64c <LED_vInit>
	LED_vInit(HLED_PORT,HLED_BLOCK);//initializes the led of block
     674:	85 b3       	in	r24, 0x15	; 21
     676:	67 e0       	ldi	r22, 0x07	; 7
     678:	0e 94 26 03 	call	0x64c	; 0x64c <LED_vInit>
	hlcd_init();//initializes the LCD screen
     67c:	0e 94 8d 02 	call	0x51a	; 0x51a <hlcd_init>
	hkpd_init();//initializes the keypad
     680:	0e 94 66 01 	call	0x2cc	; 0x2cc <hkpd_init>
	SPI_vInitMaster();//initializes the communication protocol of SPI
     684:	0e 94 d7 07 	call	0xfae	; 0xfae <SPI_vInitMaster>
	/******************************************************/		
	/* Printing Welcome screen */
	hlcd_writeString("Welcome to smart");
     688:	8c e6       	ldi	r24, 0x6C	; 108
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
	hlcd_setCursor(1,0);
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
	hlcd_writeString("home system");
     698:	8d e7       	ldi	r24, 0x7D	; 125
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     6a0:	2f ef       	ldi	r18, 0xFF	; 255
     6a2:	33 ed       	ldi	r19, 0xD3	; 211
     6a4:	80 e3       	ldi	r24, 0x30	; 48
     6a6:	21 50       	subi	r18, 0x01	; 1
     6a8:	30 40       	sbci	r19, 0x00	; 0
     6aa:	80 40       	sbci	r24, 0x00	; 0
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <main+0x4e>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <main+0x58>
     6b0:	00 00       	nop
	_delay_ms(1000);//Halt the system for the given time in (ms)
	hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     6b2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
	/***************************/
	/*Setting Passwords if not set */
	//read the state of the the passwords if set or not set
	if ( (EEPROM_ui8ReadByteFromAddress(PASS_STATUS_ADDRESS)!=PASS_SET) ) 
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 1e 01 	call	0x23c	; 0x23c <EEPROM_ui8ReadByteFromAddress>
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <main+0x6c>
     6c2:	78 c0       	rjmp	.+240    	; 0x7b4 <main+0x15c>
	{
		hlcd_writeString("Login for");//printing login menu
     6c4:	89 e8       	ldi	r24, 0x89	; 137
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
		hlcd_setCursor(1,0);//move the cursor to the second line
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
		hlcd_writeString("first time");
     6d4:	83 e9       	ldi	r24, 0x93	; 147
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     6dc:	9f ef       	ldi	r25, 0xFF	; 255
     6de:	e3 ed       	ldi	r30, 0xD3	; 211
     6e0:	f0 e3       	ldi	r31, 0x30	; 48
     6e2:	91 50       	subi	r25, 0x01	; 1
     6e4:	e0 40       	sbci	r30, 0x00	; 0
     6e6:	f0 40       	sbci	r31, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0x8a>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x94>
     6ec:	00 00       	nop
		_delay_ms(1000);//Halt the system for the given time in (ms)
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     6ee:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
		hlcd_writeString("Set Password");//printing the set password menu
     6f2:	8e e9       	ldi	r24, 0x9E	; 158
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
		hlcd_setCursor(1,0);
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
		hlcd_writeString("Password:");
     702:	8b ea       	ldi	r24, 0xAB	; 171
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>

		/********************************* setting password **********************************************/
		u8_t pass_counter=0;//the counter of the characters of the password
		u8_t pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
     70a:	8f ef       	ldi	r24, 0xFF	; 255
     70c:	89 83       	std	Y+1, r24	; 0x01
     70e:	8a 83       	std	Y+2, r24	; 0x02
     710:	8b 83       	std	Y+3, r24	; 0x03
     712:	8c 83       	std	Y+4, r24	; 0x04
     714:	9e 01       	movw	r18, r28
     716:	2f 5f       	subi	r18, 0xFF	; 255
     718:	3f 4f       	sbci	r19, 0xFF	; 255
     71a:	79 01       	movw	r14, r18
     71c:	19 e0       	ldi	r17, 0x09	; 9
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = hkpd_getPressed();//if the user pressed any button in keypad save the value in key_pressed
     71e:	0e 94 76 01 	call	0x2ec	; 0x2ec <hkpd_getPressed>
		u8_t pass_counter=0;//the counter of the characters of the password
		u8_t pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     722:	8f 3f       	cpi	r24, 0xFF	; 255
     724:	e1 f3       	breq	.-8      	; 0x71e <main+0xc6>
			{
				key_pressed = hkpd_getPressed();//if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
     726:	f7 01       	movw	r30, r14
     728:	81 93       	st	Z+, r24
     72a:	7f 01       	movw	r14, r30
			hlcd_writeChar(key_pressed);//print the entered character
     72c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hlcd_writeChar>
     730:	ff ef       	ldi	r31, 0xFF	; 255
     732:	25 ea       	ldi	r18, 0xA5	; 165
     734:	3e e0       	ldi	r19, 0x0E	; 14
     736:	f1 50       	subi	r31, 0x01	; 1
     738:	20 40       	sbci	r18, 0x00	; 0
     73a:	30 40       	sbci	r19, 0x00	; 0
     73c:	e1 f7       	brne	.-8      	; 0x736 <main+0xde>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <main+0xe8>
     740:	00 00       	nop
			_delay_ms(PASS_SHOW_TIME);//Halt the system for the given time in (ms)
			hlcd_setCursor(1,9+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
     742:	61 2f       	mov	r22, r17
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
			hlcd_writeChar(PASS_HIDE); // to display (Password sign *)
     74a:	8a e2       	ldi	r24, 0x2A	; 42
     74c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hlcd_writeChar>
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	91 ee       	ldi	r25, 0xE1	; 225
     754:	e4 e0       	ldi	r30, 0x04	; 4
     756:	81 50       	subi	r24, 0x01	; 1
     758:	90 40       	sbci	r25, 0x00	; 0
     75a:	e0 40       	sbci	r30, 0x00	; 0
     75c:	e1 f7       	brne	.-8      	; 0x756 <main+0xfe>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <main+0x108>
     760:	00 00       	nop
     762:	1f 5f       	subi	r17, 0xFF	; 255
		hlcd_writeString("Password:");

		/********************************* setting password **********************************************/
		u8_t pass_counter=0;//the counter of the characters of the password
		u8_t pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     764:	1d 30       	cpi	r17, 0x0D	; 13
     766:	d9 f6       	brne	.-74     	; 0x71e <main+0xc6>
			hlcd_setCursor(1,9+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
			hlcd_writeChar(PASS_HIDE); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_PASS_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
     768:	44 e0       	ldi	r20, 0x04	; 4
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	be 01       	movw	r22, r28
     76e:	6f 5f       	subi	r22, 0xFF	; 255
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 49 01 	call	0x292	; 0x292 <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 3d 01 	call	0x27a	; 0x27a <EEPROM_vWriteByteToAddress>
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     784:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
		hlcd_writeString("Pass Saved");// show pass saved message
     788:	85 eb       	ldi	r24, 0xB5	; 181
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     790:	ff ef       	ldi	r31, 0xFF	; 255
     792:	29 e6       	ldi	r18, 0x69	; 105
     794:	38 e1       	ldi	r19, 0x18	; 24
     796:	f1 50       	subi	r31, 0x01	; 1
     798:	20 40       	sbci	r18, 0x00	; 0
     79a:	30 40       	sbci	r19, 0x00	; 0
     79c:	e1 f7       	brne	.-8      	; 0x796 <main+0x13e>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <main+0x148>
     7a0:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     7a2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>

		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	85 e0       	ldi	r24, 0x05	; 5
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 3d 01 	call	0x27a	; 0x27a <EEPROM_vWriteByteToAddress>
	u8_t temperature = 0;//The average temperature of the room
	u8_t temp_ones = NOT_SET;//The entered right number of the temperature
	u8_t temp_tens = NOT_SET;//The entered left number of the temperature
	
	u8_t login_mode = LOGOUT; //Initialize login mode as not logged in
	u8_t block_mode = FALSE;//Is true if the login is blocked or false if not blocked
     7b0:	b1 2c       	mov	r11, r1
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <main+0x166>

		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
	}//The end of if password is set
	else//this code of else run only if the system is not running for the first time (passwords is set)
	{
		block_mode = EEPROM_ui8ReadByteFromAddress(LOGIN_BLOCKED_ADDRESS); //read the blocked location from EEPROM
     7b4:	85 e0       	ldi	r24, 0x05	; 5
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 1e 01 	call	0x23c	; 0x23c <EEPROM_ui8ReadByteFromAddress>
     7bc:	b8 2e       	mov	r11, r24
	u8_t temperature = 0;//The average temperature of the room
	u8_t temp_ones = NOT_SET;//The entered right number of the temperature
	u8_t temp_tens = NOT_SET;//The entered left number of the temperature
	
	u8_t login_mode = LOGOUT; //Initialize login mode as not logged in
	u8_t block_mode = FALSE;//Is true if the login is blocked or false if not blocked
     7be:	00 e0       	ldi	r16, 0x00	; 0
     7c0:	0f 2e       	mov	r0, r31
     7c2:	f2 e3       	ldi	r31, 0x32	; 50
     7c4:	af 2e       	mov	r10, r31
     7c6:	f0 2d       	mov	r31, r0
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
			}

			/************************************* login **********************************************/
			u8_t pass_counter=0;//counts the entered key of the password from the keypad
			u8_t pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     7c8:	cc 24       	eor	r12, r12
     7ca:	ca 94       	dec	r12
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(200);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
     7cc:	0f 2e       	mov	r0, r31
     7ce:	fa e0       	ldi	r31, 0x0A	; 10
     7d0:	8f 2e       	mov	r8, r31
     7d2:	f0 2d       	mov	r31, r0
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
     7d4:	0f 2e       	mov	r0, r31
     7d6:	f9 e0       	ldi	r31, 0x09	; 9
     7d8:	9f 2e       	mov	r9, r31
     7da:	f0 2d       	mov	r31, r0
	while (1)//The start of the periodic code
	{
		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
		u8_t pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
		
		if ( session_timeout==TRUE )//check for timeout
     7dc:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	e1 f4       	brne	.+56     	; 0x81c <main+0x1c4>
		{//if timeout flag was raised
			timer0_stop();//stop the timer that increase the session counter
     7e4:	0e 94 f9 07 	call	0xff2	; 0xff2 <timer0_stop>
			session_counter = 0;//clear session counter
     7e8:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <session_counter+0x1>
     7ec:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <session_counter>
			session_timeout=FALSE;//clear time out flag
     7f0:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <__data_end>
			login_mode=LOGOUT;//log the user out
			key_pressed = NOT_PRESSED;//clear the key_pressed to avoid unwanted selection in the menu switch
			LED_vTurnOff(HLED_PORT,HLED_LOGIN);//turnoff the led of the LOGIN
     7f4:	85 b3       	in	r24, 0x15	; 21
     7f6:	62 e0       	ldi	r22, 0x02	; 2
     7f8:	0e 94 2b 03 	call	0x656	; 0x656 <LED_vTurnOff>
			hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     7fc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
			hlcd_writeString("Session Timeout");//print session timeout message
     800:	80 ec       	ldi	r24, 0xC0	; 192
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     808:	8f ef       	ldi	r24, 0xFF	; 255
     80a:	93 ed       	ldi	r25, 0xD3	; 211
     80c:	e0 e3       	ldi	r30, 0x30	; 48
     80e:	81 50       	subi	r24, 0x01	; 1
     810:	90 40       	sbci	r25, 0x00	; 0
     812:	e0 40       	sbci	r30, 0x00	; 0
     814:	e1 f7       	brne	.-8      	; 0x80e <main+0x1b6>
     816:	00 c0       	rjmp	.+0      	; 0x818 <main+0x1c0>
     818:	00 00       	nop
     81a:	02 c0       	rjmp	.+4      	; 0x820 <main+0x1c8>
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==LOGOUT)//The user can only leave the loop only in case of he was logged in
     81c:	01 11       	cpse	r16, r1
     81e:	d5 c0       	rjmp	.+426    	; 0x9ca <__stack+0x16b>
	u8_t temperature = 0;//The average temperature of the room
	u8_t temp_ones = NOT_SET;//The entered right number of the temperature
	u8_t temp_tens = NOT_SET;//The entered left number of the temperature
	
	u8_t login_mode = LOGOUT; //Initialize login mode as not logged in
	u8_t block_mode = FALSE;//Is true if the login is blocked or false if not blocked
     820:	00 e0       	ldi	r16, 0x00	; 0
			hlcd_writeString("Session Timeout");//print session timeout message
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==LOGOUT)//The user can only leave the loop only in case of he was logged in
		{
			if(block_mode==TRUE)//if the login process was blocked wait till the end of the block period
     822:	f1 e0       	ldi	r31, 0x01	; 1
     824:	bf 12       	cpse	r11, r31
     826:	29 c0       	rjmp	.+82     	; 0x87a <__stack+0x1b>
			{
				hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     828:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
				hlcd_writeString("Login blocked");
     82c:	80 ed       	ldi	r24, 0xD0	; 208
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
				hlcd_setCursor(1,0);
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
				hlcd_writeString("wait 20 seconds");
     83c:	8e ed       	ldi	r24, 0xDE	; 222
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
				LED_vTurnOn(HLED_PORT,HLED_BLOCK);//Turn on the led of Blocked
     844:	85 b3       	in	r24, 0x15	; 21
     846:	67 e0       	ldi	r22, 0x07	; 7
     848:	0e 94 2a 03 	call	0x654	; 0x654 <LED_vTurnOn>
     84c:	24 e5       	ldi	r18, 0x54	; 84
     84e:	3d ec       	ldi	r19, 0xCD	; 205
     850:	8d e2       	ldi	r24, 0x2D	; 45
     852:	93 e0       	ldi	r25, 0x03	; 3
     854:	21 50       	subi	r18, 0x01	; 1
     856:	30 40       	sbci	r19, 0x00	; 0
     858:	80 40       	sbci	r24, 0x00	; 0
     85a:	90 40       	sbci	r25, 0x00	; 0
     85c:	d9 f7       	brne	.-10     	; 0x854 <main+0x1fc>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 c0       	rjmp	.+0      	; 0x862 <__stack+0x3>
     862:	00 00       	nop
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
				block_mode = FALSE;//Disable block of runtime
				LED_vTurnOff(HLED_PORT,HLED_BLOCK);//Turn off the led of Blocked
     864:	85 b3       	in	r24, 0x15	; 21
     866:	67 e0       	ldi	r22, 0x07	; 7
     868:	0e 94 2b 03 	call	0x656	; 0x656 <LED_vTurnOff>
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	85 e0       	ldi	r24, 0x05	; 5
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 3d 01 	call	0x27a	; 0x27a <EEPROM_vWriteByteToAddress>
				hlcd_writeString("Login blocked");
				hlcd_setCursor(1,0);
				hlcd_writeString("wait 20 seconds");
				LED_vTurnOn(HLED_PORT,HLED_BLOCK);//Turn on the led of Blocked
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
     876:	00 e0       	ldi	r16, 0x00	; 0
				block_mode = FALSE;//Disable block of runtime
     878:	b1 2c       	mov	r11, r1
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
			}

			/************************************* login **********************************************/
			u8_t pass_counter=0;//counts the entered key of the password from the keypad
			u8_t pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     87a:	cd 82       	std	Y+5, r12	; 0x05
     87c:	ce 82       	std	Y+6, r12	; 0x06
     87e:	cf 82       	std	Y+7, r12	; 0x07
     880:	c8 86       	std	Y+8, r12	; 0x08
			u8_t stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
     882:	c9 82       	std	Y+1, r12	; 0x01
     884:	ca 82       	std	Y+2, r12	; 0x02
     886:	cb 82       	std	Y+3, r12	; 0x03
     888:	cc 82       	std	Y+4, r12	; 0x04
     88a:	da 2c       	mov	r13, r10
     88c:	d0 1a       	sub	r13, r16
					
			while(login_mode!=LOGIN)//this loop is to repeat the login in case of wrong password
			{
				key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
				hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     88e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
				hlcd_writeString("Login mode");
     892:	8e ee       	ldi	r24, 0xEE	; 238
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
				hlcd_setCursor(1,0);
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
				hlcd_writeString("Enter Pass:");
     8a2:	89 ef       	ldi	r24, 0xF9	; 249
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     8aa:	ef ef       	ldi	r30, 0xFF	; 255
     8ac:	f3 ec       	ldi	r31, 0xC3	; 195
     8ae:	29 e0       	ldi	r18, 0x09	; 9
     8b0:	e1 50       	subi	r30, 0x01	; 1
     8b2:	f0 40       	sbci	r31, 0x00	; 0
     8b4:	20 40       	sbci	r18, 0x00	; 0
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <__stack+0x51>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <__stack+0x5b>
     8ba:	00 00       	nop
     8bc:	7e 01       	movw	r14, r28
     8be:	35 e0       	ldi	r19, 0x05	; 5
     8c0:	e3 0e       	add	r14, r19
     8c2:	f1 1c       	adc	r15, r1
     8c4:	1b e0       	ldi	r17, 0x0B	; 11
				pass_counter=0;//counts the number of entered characters
				while(pass_counter<PASS_SIZE)
				{
					while (key_pressed == NOT_PRESSED)//repeat till the user press any key
					{
						key_pressed = hkpd_getPressed();//if the user pressed any button in keypad save the value in key_pressed
     8c6:	0e 94 76 01 	call	0x2ec	; 0x2ec <hkpd_getPressed>
				hlcd_writeString("Enter Pass:");
				_delay_ms(200);//Halt the system for the given time in (ms)
				pass_counter=0;//counts the number of entered characters
				while(pass_counter<PASS_SIZE)
				{
					while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     8ca:	8f 3f       	cpi	r24, 0xFF	; 255
     8cc:	e1 f3       	breq	.-8      	; 0x8c6 <__stack+0x67>
					{
						key_pressed = hkpd_getPressed();//if the user pressed any button in keypad save the value in key_pressed
					}
					pass[pass_counter]=key_pressed;//add the entered character to the pass array
     8ce:	f7 01       	movw	r30, r14
     8d0:	81 93       	st	Z+, r24
     8d2:	7f 01       	movw	r14, r30
					hlcd_writeChar(key_pressed);//print the entered character
     8d4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hlcd_writeChar>
     8d8:	ff ef       	ldi	r31, 0xFF	; 255
     8da:	25 ea       	ldi	r18, 0xA5	; 165
     8dc:	3e e0       	ldi	r19, 0x0E	; 14
     8de:	f1 50       	subi	r31, 0x01	; 1
     8e0:	20 40       	sbci	r18, 0x00	; 0
     8e2:	30 40       	sbci	r19, 0x00	; 0
     8e4:	e1 f7       	brne	.-8      	; 0x8de <__stack+0x7f>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <__stack+0x89>
     8e8:	00 00       	nop
					_delay_ms(PASS_SHOW_TIME);//Halt the system for the given time in (ms)
					hlcd_setCursor(1,11+pass_counter);//move the cursor of the lcd screen to the previous location
     8ea:	61 2f       	mov	r22, r17
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
					hlcd_writeChar(PASS_HIDE);// to display (Password sign *)
     8f2:	8a e2       	ldi	r24, 0x2A	; 42
     8f4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hlcd_writeChar>
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	91 ee       	ldi	r25, 0xE1	; 225
     8fc:	e4 e0       	ldi	r30, 0x04	; 4
     8fe:	81 50       	subi	r24, 0x01	; 1
     900:	90 40       	sbci	r25, 0x00	; 0
     902:	e0 40       	sbci	r30, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <__stack+0x9f>
     906:	00 c0       	rjmp	.+0      	; 0x908 <__stack+0xa9>
     908:	00 00       	nop
     90a:	1f 5f       	subi	r17, 0xFF	; 255
				hlcd_writeString("Login mode");
				hlcd_setCursor(1,0);
				hlcd_writeString("Enter Pass:");
				_delay_ms(200);//Halt the system for the given time in (ms)
				pass_counter=0;//counts the number of entered characters
				while(pass_counter<PASS_SIZE)
     90c:	1f 30       	cpi	r17, 0x0F	; 15
     90e:	d9 f6       	brne	.-74     	; 0x8c6 <__stack+0x67>
					hlcd_writeChar(PASS_HIDE);// to display (Password sign *)
					_delay_ms(100);//Halt the system for the given time in (ms)
					pass_counter++;//increase the password counter that count the characters of the pass
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
				}
				EEPROM_vReadBlockFromAddress(EEPROM_PASS_ADDRESS,stored_pass,PASS_SIZE);//read the stored pass from the EEPROM
     910:	44 e0       	ldi	r20, 0x04	; 4
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	be 01       	movw	r22, r28
     916:	6f 5f       	subi	r22, 0xFF	; 255
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 25 01 	call	0x24a	; 0x24a <EEPROM_vReadBlockFromAddress>

				/*compare passwords*/
				if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
     922:	44 e0       	ldi	r20, 0x04	; 4
     924:	be 01       	movw	r22, r28
     926:	6f 5f       	subi	r22, 0xFF	; 255
     928:	7f 4f       	sbci	r23, 0xFF	; 255
     92a:	ce 01       	movw	r24, r28
     92c:	05 96       	adiw	r24, 0x05	; 5
     92e:	0e 94 c2 06 	call	0xd84	; 0xd84 <ui8ComparePass>
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	09 f5       	brne	.+66     	; 0x978 <__stack+0x119>
				{
					login_mode = LOGIN;//set the mode to login
					pass_tries_count=0;//clear the counter of wrong tries
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     936:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
					hlcd_writeString("Right pass");
     93a:	85 e0       	ldi	r24, 0x05	; 5
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
					hlcd_setCursor(1,0);
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
					hlcd_writeString("Login Success");
     94a:	80 e1       	ldi	r24, 0x10	; 16
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     952:	ff ef       	ldi	r31, 0xFF	; 255
     954:	29 e6       	ldi	r18, 0x69	; 105
     956:	38 e1       	ldi	r19, 0x18	; 24
     958:	f1 50       	subi	r31, 0x01	; 1
     95a:	20 40       	sbci	r18, 0x00	; 0
     95c:	30 40       	sbci	r19, 0x00	; 0
     95e:	e1 f7       	brne	.-8      	; 0x958 <__stack+0xf9>
     960:	00 c0       	rjmp	.+0      	; 0x962 <__stack+0x103>
     962:	00 00       	nop
					_delay_ms(500);//Halt the system for the given time in (ms)
					LED_vTurnOn(HLED_PORT,HLED_LOGIN);//turn on the led of login
     964:	85 b3       	in	r24, 0x15	; 21
     966:	62 e0       	ldi	r22, 0x02	; 2
     968:	0e 94 2a 03 	call	0x654	; 0x654 <LED_vTurnOn>
					timer0_initializeCTC();//start the timer that counts the session time
     96c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <timer0_initializeCTC>
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     970:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
     974:	01 e0       	ldi	r16, 0x01	; 1
     976:	29 c0       	rjmp	.+82     	; 0x9ca <__stack+0x16b>
				}
				else//in case of wrong password
				{
					pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     978:	0f 5f       	subi	r16, 0xFF	; 255
					login_mode = LOGOUT;//set the mode as not logged in
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     97a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
					hlcd_writeString("Wrong Pass");
     97e:	8e e1       	ldi	r24, 0x1E	; 30
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
					hlcd_setCursor(1,0);
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
					hlcd_writeString("Tries left:");
     98e:	89 e2       	ldi	r24, 0x29	; 41
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
					hlcd_writeChar(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     996:	8d 2d       	mov	r24, r13
     998:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hlcd_writeChar>
     99c:	8f ef       	ldi	r24, 0xFF	; 255
     99e:	93 ed       	ldi	r25, 0xD3	; 211
     9a0:	e0 e3       	ldi	r30, 0x30	; 48
     9a2:	81 50       	subi	r24, 0x01	; 1
     9a4:	90 40       	sbci	r25, 0x00	; 0
     9a6:	e0 40       	sbci	r30, 0x00	; 0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <__stack+0x143>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <__stack+0x14d>
     9ac:	00 00       	nop
					_delay_ms(1000);//Halt the system for the given time in (ms)
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     9ae:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
     9b2:	da 94       	dec	r13
					if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     9b4:	03 30       	cpi	r16, 0x03	; 3
     9b6:	08 f4       	brcc	.+2      	; 0x9ba <__stack+0x15b>
     9b8:	6a cf       	rjmp	.-300    	; 0x88e <__stack+0x2f>
					{
						EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	85 e0       	ldi	r24, 0x05	; 5
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	0e 94 3d 01 	call	0x27a	; 0x27a <EEPROM_vWriteByteToAddress>
						block_mode = TRUE;//turn on block mode
     9c4:	bb 24       	eor	r11, r11
     9c6:	b3 94       	inc	r11
     9c8:	2c cf       	rjmp	.-424    	; 0x822 <main+0x1ca>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					hlcd_writeString("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     9ca:	11 e0       	ldi	r17, 0x01	; 1
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     9cc:	68 94       	set
     9ce:	dd 24       	eor	r13, r13
     9d0:	d1 f8       	bld	r13, 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f7 e0       	ldi	r31, 0x07	; 7
     9d6:	3f 2e       	mov	r3, r31
     9d8:	f0 2d       	mov	r31, r0
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
					{
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
     9da:	68 94       	set
     9dc:	ee 24       	eor	r14, r14
     9de:	e3 f8       	bld	r14, 3
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(200);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4)//If key pressed is 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     9e0:	0f 2e       	mov	r0, r31
     9e2:	f6 e0       	ldi	r31, 0x06	; 6
     9e4:	4f 2e       	mov	r4, r31
     9e6:	f0 2d       	mov	r31, r0
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
     9e8:	68 94       	set
     9ea:	55 24       	eor	r5, r5
     9ec:	52 f8       	bld	r5, 2
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
     9ee:	0f 2e       	mov	r0, r31
     9f0:	f5 e0       	ldi	r31, 0x05	; 5
     9f2:	6f 2e       	mov	r6, r31
     9f4:	f0 2d       	mov	r31, r0
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(200);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
     9f6:	0f 2e       	mov	r0, r31
     9f8:	f3 e0       	ldi	r31, 0x03	; 3
     9fa:	7f 2e       	mov	r7, r31
     9fc:	f0 2d       	mov	r31, r0
     9fe:	a4 c1       	rjmp	.+840    	; 0xd48 <__stack+0x4e9>
		
		
		while(session_timeout!=TRUE)//Show the menu in case of the time is not out
		{
			key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
			switch (show_menu)
     a00:	fa 01       	movw	r30, r20
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	ea 30       	cpi	r30, 0x0A	; 10
     a06:	f1 05       	cpc	r31, r1
     a08:	08 f0       	brcs	.+2      	; 0xa0c <__stack+0x1ad>
     a0a:	a2 c1       	rjmp	.+836    	; 0xd50 <__stack+0x4f1>
     a0c:	e6 5d       	subi	r30, 0xD6	; 214
     a0e:	ff 4f       	sbci	r31, 0xFF	; 255
     a10:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__tablejump2__>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
				break;//End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && session_timeout == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
     a14:	88 23       	and	r24, r24
     a16:	09 f4       	brne	.+2      	; 0xa1a <__stack+0x1bb>
     a18:	fa c0       	rjmp	.+500    	; 0xc0e <__stack+0x3af>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					hlcd_writeString("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     a1a:	1e 2d       	mov	r17, r14
     a1c:	95 c1       	rjmp	.+810    	; 0xd48 <__stack+0x4e9>
			{
				case MAIN_MENU:
				do
				{
					/******************** print main Menu ******************/
					hlcd_clearLCD();
     a1e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
					hlcd_writeString("1:Room1 2:Room5");
     a22:	85 e3       	ldi	r24, 0x35	; 53
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
					hlcd_setCursor(1,0);
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
					hlcd_writeString("3:Room3 4:More ");
     a32:	85 e4       	ldi	r24, 0x45	; 69
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
					/*******************************************************/
					
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     a3a:	80 2f       	mov	r24, r16
     a3c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <u8GetKeyPressed>
     a40:	f8 2e       	mov	r15, r24
     a42:	ff ef       	ldi	r31, 0xFF	; 255
     a44:	23 ec       	ldi	r18, 0xC3	; 195
     a46:	39 e0       	ldi	r19, 0x09	; 9
     a48:	f1 50       	subi	r31, 0x01	; 1
     a4a:	20 40       	sbci	r18, 0x00	; 0
     a4c:	30 40       	sbci	r19, 0x00	; 0
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <__stack+0x1e9>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <__stack+0x1f3>
     a52:	00 00       	nop
					_delay_ms(200);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
     a54:	81 e3       	ldi	r24, 0x31	; 49
     a56:	f8 16       	cp	r15, r24
     a58:	09 f4       	brne	.+2      	; 0xa5c <__stack+0x1fd>
     a5a:	7e c1       	rjmp	.+764    	; 0xd58 <__stack+0x4f9>
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
     a5c:	92 e3       	ldi	r25, 0x32	; 50
     a5e:	f9 16       	cp	r15, r25
     a60:	09 f4       	brne	.+2      	; 0xa64 <__stack+0x205>
     a62:	7c c1       	rjmp	.+760    	; 0xd5c <__stack+0x4fd>
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
     a64:	e3 e3       	ldi	r30, 0x33	; 51
     a66:	fe 16       	cp	r15, r30
     a68:	09 f4       	brne	.+2      	; 0xa6c <__stack+0x20d>
     a6a:	7a c1       	rjmp	.+756    	; 0xd60 <__stack+0x501>
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
					}
					else if (key_pressed == MORE_OPTION)//If key pressed is 4
     a6c:	f4 e3       	ldi	r31, 0x34	; 52
     a6e:	ff 16       	cp	r15, r31
     a70:	09 f4       	brne	.+2      	; 0xa74 <__stack+0x215>
     a72:	78 c1       	rjmp	.+752    	; 0xd64 <__stack+0x505>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     a74:	2f ef       	ldi	r18, 0xFF	; 255
     a76:	f2 16       	cp	r15, r18
     a78:	a1 f0       	breq	.+40     	; 0xaa2 <__stack+0x243>
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a7a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
						hlcd_writeString("Wrong input");//print error message
     a7e:	85 e5       	ldi	r24, 0x55	; 85
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     a86:	3f ef       	ldi	r19, 0xFF	; 255
     a88:	89 e6       	ldi	r24, 0x69	; 105
     a8a:	98 e1       	ldi	r25, 0x18	; 24
     a8c:	31 50       	subi	r19, 0x01	; 1
     a8e:	80 40       	sbci	r24, 0x00	; 0
     a90:	90 40       	sbci	r25, 0x00	; 0
     a92:	e1 f7       	brne	.-8      	; 0xa8c <__stack+0x22d>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <__stack+0x237>
     a96:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while ( ((key_pressed < '1') || (key_pressed > '4') ) && (session_timeout == FALSE) );//break the loop in case of valid key or time is out
     a98:	8f ec       	ldi	r24, 0xCF	; 207
     a9a:	8f 0d       	add	r24, r15
     a9c:	84 30       	cpi	r24, 0x04	; 4
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__stack+0x243>
     aa0:	53 c1       	rjmp	.+678    	; 0xd48 <__stack+0x4e9>
     aa2:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     aa6:	88 23       	and	r24, r24
     aa8:	09 f4       	brne	.+2      	; 0xaac <__stack+0x24d>
     aaa:	b9 cf       	rjmp	.-142    	; 0xa1e <__stack+0x1bf>
     aac:	4d c1       	rjmp	.+666    	; 0xd48 <__stack+0x4e9>
				
				case MORE_MENU:
				do
				{
					/******************** print more Menu ******************/
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     aae:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
					hlcd_writeString("1:Room4    2:TV   ");
     ab2:	81 e6       	ldi	r24, 0x61	; 97
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
					hlcd_setCursor(1,0);
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
					hlcd_writeString("3:Air Cond.4:RET");
     ac2:	84 e7       	ldi	r24, 0x74	; 116
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     aca:	80 2f       	mov	r24, r16
     acc:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <u8GetKeyPressed>
     ad0:	f8 2e       	mov	r15, r24
     ad2:	ef ef       	ldi	r30, 0xFF	; 255
     ad4:	f3 ec       	ldi	r31, 0xC3	; 195
     ad6:	29 e0       	ldi	r18, 0x09	; 9
     ad8:	e1 50       	subi	r30, 0x01	; 1
     ada:	f0 40       	sbci	r31, 0x00	; 0
     adc:	20 40       	sbci	r18, 0x00	; 0
     ade:	e1 f7       	brne	.-8      	; 0xad8 <__stack+0x279>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <__stack+0x283>
     ae2:	00 00       	nop
					_delay_ms(200);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4)//If key pressed is 1
     ae4:	31 e3       	ldi	r19, 0x31	; 49
     ae6:	83 17       	cp	r24, r19
     ae8:	09 f4       	brne	.+2      	; 0xaec <__stack+0x28d>
     aea:	3e c1       	rjmp	.+636    	; 0xd68 <__stack+0x509>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
     aec:	82 e3       	ldi	r24, 0x32	; 50
     aee:	f8 16       	cp	r15, r24
     af0:	09 f4       	brne	.+2      	; 0xaf4 <__stack+0x295>
     af2:	3c c1       	rjmp	.+632    	; 0xd6c <__stack+0x50d>
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
     af4:	93 e3       	ldi	r25, 0x33	; 51
     af6:	f9 16       	cp	r15, r25
     af8:	09 f4       	brne	.+2      	; 0xafc <__stack+0x29d>
     afa:	3a c1       	rjmp	.+628    	; 0xd70 <__stack+0x511>
					{
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
					}
					else if (key_pressed == RET_OPTION)//If key pressed is 4 (RET)
     afc:	e4 e3       	ldi	r30, 0x34	; 52
     afe:	fe 16       	cp	r15, r30
     b00:	09 f4       	brne	.+2      	; 0xb04 <__stack+0x2a5>
     b02:	38 c1       	rjmp	.+624    	; 0xd74 <__stack+0x515>
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     b04:	ff ef       	ldi	r31, 0xFF	; 255
     b06:	ff 16       	cp	r15, r31
     b08:	a1 f0       	breq	.+40     	; 0xb32 <__stack+0x2d3>
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     b0a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
						hlcd_writeString("Wrong input");//print error message
     b0e:	85 e5       	ldi	r24, 0x55	; 85
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     b16:	2f ef       	ldi	r18, 0xFF	; 255
     b18:	39 e6       	ldi	r19, 0x69	; 105
     b1a:	88 e1       	ldi	r24, 0x18	; 24
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	30 40       	sbci	r19, 0x00	; 0
     b20:	80 40       	sbci	r24, 0x00	; 0
     b22:	e1 f7       	brne	.-8      	; 0xb1c <__stack+0x2bd>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <__stack+0x2c7>
     b26:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '1') || (key_pressed > '4') ) && (session_timeout == FALSE));//break the loop in case of valid key or time is out
     b28:	8f ec       	ldi	r24, 0xCF	; 207
     b2a:	8f 0d       	add	r24, r15
     b2c:	84 30       	cpi	r24, 0x04	; 4
     b2e:	08 f4       	brcc	.+2      	; 0xb32 <__stack+0x2d3>
     b30:	0b c1       	rjmp	.+534    	; 0xd48 <__stack+0x4e9>
     b32:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     b36:	88 23       	and	r24, r24
     b38:	09 f4       	brne	.+2      	; 0xb3c <__stack+0x2dd>
     b3a:	b9 cf       	rjmp	.-142    	; 0xaae <__stack+0x24f>
     b3c:	05 c1       	rjmp	.+522    	; 0xd48 <__stack+0x4e9>
				
				case AIRCONDITIONING_MENU:
				do
				{
					/******************** print more Menu ******************/
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     b3e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
					hlcd_writeString("1:Set temperature ");
     b42:	85 e8       	ldi	r24, 0x85	; 133
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
					hlcd_setCursor(1,0);
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
					hlcd_writeString("2:Control  0:RET");
     b52:	88 e9       	ldi	r24, 0x98	; 152
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     b5a:	80 2f       	mov	r24, r16
     b5c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <u8GetKeyPressed>
     b60:	f8 2e       	mov	r15, r24
     b62:	9f ef       	ldi	r25, 0xFF	; 255
     b64:	e3 ec       	ldi	r30, 0xC3	; 195
     b66:	f9 e0       	ldi	r31, 0x09	; 9
     b68:	91 50       	subi	r25, 0x01	; 1
     b6a:	e0 40       	sbci	r30, 0x00	; 0
     b6c:	f0 40       	sbci	r31, 0x00	; 0
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <__stack+0x309>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <__stack+0x313>
     b72:	00 00       	nop
					_delay_ms(200);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
     b74:	21 e3       	ldi	r18, 0x31	; 49
     b76:	82 17       	cp	r24, r18
     b78:	09 f4       	brne	.+2      	; 0xb7c <__stack+0x31d>
     b7a:	fe c0       	rjmp	.+508    	; 0xd78 <__stack+0x519>
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
     b7c:	32 e3       	ldi	r19, 0x32	; 50
     b7e:	83 17       	cp	r24, r19
     b80:	09 f4       	brne	.+2      	; 0xb84 <__stack+0x325>
     b82:	fc c0       	rjmp	.+504    	; 0xd7c <__stack+0x51d>
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
     b84:	80 e3       	ldi	r24, 0x30	; 48
     b86:	f8 16       	cp	r15, r24
     b88:	09 f4       	brne	.+2      	; 0xb8c <__stack+0x32d>
     b8a:	fa c0       	rjmp	.+500    	; 0xd80 <__stack+0x521>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     b8c:	9f ef       	ldi	r25, 0xFF	; 255
     b8e:	f9 16       	cp	r15, r25
     b90:	a1 f0       	breq	.+40     	; 0xbba <__stack+0x35b>
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     b92:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
						hlcd_writeString("Wrong input");//print error message
     b96:	85 e5       	ldi	r24, 0x55	; 85
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     b9e:	ef ef       	ldi	r30, 0xFF	; 255
     ba0:	f9 e6       	ldi	r31, 0x69	; 105
     ba2:	28 e1       	ldi	r18, 0x18	; 24
     ba4:	e1 50       	subi	r30, 0x01	; 1
     ba6:	f0 40       	sbci	r31, 0x00	; 0
     ba8:	20 40       	sbci	r18, 0x00	; 0
     baa:	e1 f7       	brne	.-8      	; 0xba4 <__stack+0x345>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <__stack+0x34f>
     bae:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '0') || (key_pressed > '2') ) && (session_timeout == FALSE));//break the loop in case of valid key or time is out
     bb0:	80 ed       	ldi	r24, 0xD0	; 208
     bb2:	8f 0d       	add	r24, r15
     bb4:	83 30       	cpi	r24, 0x03	; 3
     bb6:	08 f4       	brcc	.+2      	; 0xbba <__stack+0x35b>
     bb8:	c7 c0       	rjmp	.+398    	; 0xd48 <__stack+0x4e9>
     bba:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     bbe:	88 23       	and	r24, r24
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <__stack+0x365>
     bc2:	bd cf       	rjmp	.-134    	; 0xb3e <__stack+0x2df>
     bc4:	c1 c0       	rjmp	.+386    	; 0xd48 <__stack+0x4e9>
				break;//End of air conditioning menu case
				
				case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
     bc6:	60 2f       	mov	r22, r16
     bc8:	87 2d       	mov	r24, r7
     bca:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     bce:	11 e0       	ldi	r17, 0x01	; 1
				break;//End of room1 menu case
     bd0:	bb c0       	rjmp	.+374    	; 0xd48 <__stack+0x4e9>
				
				case ROOM2_MENU:
				vMenuOption(ROOM2_MENU,login_mode);//call the function that show the menu of room 2
     bd2:	60 2f       	mov	r22, r16
     bd4:	85 2d       	mov	r24, r5
     bd6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     bda:	11 e0       	ldi	r17, 0x01	; 1
				break;//End of room2 menu case
     bdc:	b5 c0       	rjmp	.+362    	; 0xd48 <__stack+0x4e9>
				
				case ROOM3_MENU:
				vMenuOption(ROOM3_MENU,login_mode);//call the function that show the menu of room 3
     bde:	60 2f       	mov	r22, r16
     be0:	86 2d       	mov	r24, r6
     be2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     be6:	11 e0       	ldi	r17, 0x01	; 1
				break;//End of room3 menu case
     be8:	af c0       	rjmp	.+350    	; 0xd48 <__stack+0x4e9>
				
				case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
     bea:	60 2f       	mov	r22, r16
     bec:	84 2d       	mov	r24, r4
     bee:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <vMenuOption>
				show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     bf2:	1d 2d       	mov	r17, r13
				break;//End of room4 menu case
     bf4:	a9 c0       	rjmp	.+338    	; 0xd48 <__stack+0x4e9>
				
				case TV_MENU:
				vMenuOption(TV_MENU,login_mode);//call the function that show the menu of tv
     bf6:	60 2f       	mov	r22, r16
     bf8:	83 2d       	mov	r24, r3
     bfa:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <vMenuOption>
				show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     bfe:	1d 2d       	mov	r17, r13
				break;//End of TV menu case
     c00:	a3 c0       	rjmp	.+326    	; 0xd48 <__stack+0x4e9>
				
				case AIRCOND_CTRL_MENU:
				vMenuOption(AIRCOND_CTRL_MENU,login_mode);//call the function that show the menu of Air conditioning control
     c02:	60 2f       	mov	r22, r16
     c04:	89 2d       	mov	r24, r9
     c06:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <vMenuOption>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     c0a:	1e 2d       	mov	r17, r14
				break;//End of air conditioning control menu case
     c0c:	9d c0       	rjmp	.+314    	; 0xd48 <__stack+0x4e9>
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && session_timeout == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
				{
					key_pressed = NOT_PRESSED;//set the key pressed to the default value
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c0e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
					hlcd_writeString("Set temp.:__ ");//print the format of inserting temperature
     c12:	89 ea       	ldi	r24, 0xA9	; 169
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
					hlcd_writeChar(DEGREES_SYMBOL); // print the symbol of degree
     c1a:	8f ed       	ldi	r24, 0xDF	; 223
     c1c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hlcd_writeChar>
					hlcd_writeChar('C'); // print the C character
     c20:	83 e4       	ldi	r24, 0x43	; 67
     c22:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hlcd_writeChar>
					hlcd_setCursor(0,11);//move the cursor to the place to write the entered temperature
     c26:	6b e0       	ldi	r22, 0x0B	; 11
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
     c2e:	3f ef       	ldi	r19, 0xFF	; 255
     c30:	83 ec       	ldi	r24, 0xC3	; 195
     c32:	99 e0       	ldi	r25, 0x09	; 9
     c34:	31 50       	subi	r19, 0x01	; 1
     c36:	80 40       	sbci	r24, 0x00	; 0
     c38:	90 40       	sbci	r25, 0x00	; 0
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <__stack+0x3d5>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <__stack+0x3df>
     c3e:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)

					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     c40:	80 2f       	mov	r24, r16
     c42:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <u8GetKeyPressed>
     c46:	ef ef       	ldi	r30, 0xFF	; 255
     c48:	f4 e3       	ldi	r31, 0x34	; 52
     c4a:	2c e0       	ldi	r18, 0x0C	; 12
     c4c:	e1 50       	subi	r30, 0x01	; 1
     c4e:	f0 40       	sbci	r31, 0x00	; 0
     c50:	20 40       	sbci	r18, 0x00	; 0
     c52:	e1 f7       	brne	.-8      	; 0xc4c <__stack+0x3ed>
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <__stack+0x3f7>
     c56:	00 00       	nop
					_delay_ms(250);//to avoid the duplication of the pressed key

					if (session_timeout == TRUE) //in case of the time is out before the user press a key
     c58:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <__data_end>
     c5c:	91 30       	cpi	r25, 0x01	; 1
     c5e:	09 f4       	brne	.+2      	; 0xc62 <__stack+0x403>
     c60:	6e c0       	rjmp	.+220    	; 0xd3e <__stack+0x4df>
					{
						break;//break the loop that ask for temperature
					}
					if (key_pressed <'0' || key_pressed >'9')//show wrong input message if the user entered non numeric value
     c62:	0f 2e       	mov	r0, r31
     c64:	f0 ed       	ldi	r31, 0xD0	; 208
     c66:	ff 2e       	mov	r15, r31
     c68:	f0 2d       	mov	r31, r0
     c6a:	f8 0e       	add	r15, r24
     c6c:	39 e0       	ldi	r19, 0x09	; 9
     c6e:	3f 15       	cp	r19, r15
     c70:	80 f4       	brcc	.+32     	; 0xc92 <__stack+0x433>
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c72:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
						hlcd_writeString("Wrong input");//print error message
     c76:	85 e5       	ldi	r24, 0x55	; 85
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	99 e6       	ldi	r25, 0x69	; 105
     c82:	e8 e1       	ldi	r30, 0x18	; 24
     c84:	81 50       	subi	r24, 0x01	; 1
     c86:	90 40       	sbci	r25, 0x00	; 0
     c88:	e0 40       	sbci	r30, 0x00	; 0
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <__stack+0x425>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <__stack+0x42f>
     c8e:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)# line 672
     c90:	4f c0       	rjmp	.+158    	; 0xd30 <__stack+0x4d1>
					}
					else//if the value is valid
					{
						hlcd_writeChar(key_pressed);//print the value on the lcd
     c92:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hlcd_writeChar>
						temp_tens = key_pressed-ASCII_ZERO;//save the entered value
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
					}
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     c96:	80 2f       	mov	r24, r16
     c98:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <u8GetKeyPressed>
     c9c:	ff ef       	ldi	r31, 0xFF	; 255
     c9e:	24 e3       	ldi	r18, 0x34	; 52
     ca0:	3c e0       	ldi	r19, 0x0C	; 12
     ca2:	f1 50       	subi	r31, 0x01	; 1
     ca4:	20 40       	sbci	r18, 0x00	; 0
     ca6:	30 40       	sbci	r19, 0x00	; 0
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <__stack+0x443>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <__stack+0x44d>
     cac:	00 00       	nop
					_delay_ms(250);//to avoid the duplication of the pressed key
					
					if (session_timeout == TRUE)//if the user session is timeout
     cae:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <__data_end>
     cb2:	91 30       	cpi	r25, 0x01	; 1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <__stack+0x459>
     cb6:	45 c0       	rjmp	.+138    	; 0xd42 <__stack+0x4e3>
					{
						break;//break the loop that ask for temperature
					}
					if ((key_pressed <'0' || key_pressed >'9'))//show wrong input message if the user entered non numeric value
     cb8:	10 ed       	ldi	r17, 0xD0	; 208
     cba:	18 0f       	add	r17, r24
     cbc:	1a 30       	cpi	r17, 0x0A	; 10
     cbe:	80 f0       	brcs	.+32     	; 0xce0 <__stack+0x481>
					{
						hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     cc0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
						hlcd_writeString("Wrong input");//print error message
     cc4:	85 e5       	ldi	r24, 0x55	; 85
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	99 e6       	ldi	r25, 0x69	; 105
     cd0:	e8 e1       	ldi	r30, 0x18	; 24
     cd2:	81 50       	subi	r24, 0x01	; 1
     cd4:	90 40       	sbci	r25, 0x00	; 0
     cd6:	e0 40       	sbci	r30, 0x00	; 0
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <__stack+0x473>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <__stack+0x47d>
     cdc:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
     cde:	28 c0       	rjmp	.+80     	; 0xd30 <__stack+0x4d1>
					}
					else//if the value is valid
					{
						hlcd_writeChar(key_pressed);//print the value on the lcd
     ce0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hlcd_writeChar>
						temp_ones = key_pressed-ASCII_ZERO;//save the entered value
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
					}
					temperature = temp_tens*10 + temp_ones;//set the value of the temperature from the given separated values
     ce4:	ff 0c       	add	r15, r15
     ce6:	8f 2d       	mov	r24, r15
     ce8:	88 0f       	add	r24, r24
     cea:	88 0f       	add	r24, r24
     cec:	f8 0e       	add	r15, r24
     cee:	1f 0d       	add	r17, r15
					SPI_ui8TransmitRecive(SET_TEMPERATURE);//Send the code of set temperature
     cf0:	80 e4       	ldi	r24, 0x40	; 64
     cf2:	0e 94 de 07 	call	0xfbc	; 0xfbc <SPI_ui8TransmitRecive>
     cf6:	ff ef       	ldi	r31, 0xFF	; 255
     cf8:	23 ec       	ldi	r18, 0xC3	; 195
     cfa:	39 e0       	ldi	r19, 0x09	; 9
     cfc:	f1 50       	subi	r31, 0x01	; 1
     cfe:	20 40       	sbci	r18, 0x00	; 0
     d00:	30 40       	sbci	r19, 0x00	; 0
     d02:	e1 f7       	brne	.-8      	; 0xcfc <__stack+0x49d>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <__stack+0x4a7>
     d06:	00 00       	nop
					_delay_ms(200);//Halt the system to prevent write collision
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
     d08:	81 2f       	mov	r24, r17
     d0a:	0e 94 de 07 	call	0xfbc	; 0xfbc <SPI_ui8TransmitRecive>
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d0e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
					hlcd_writeString("Temperature Sent");//show the message
     d12:	87 eb       	ldi	r24, 0xB7	; 183
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	99 e6       	ldi	r25, 0x69	; 105
     d1e:	e8 e1       	ldi	r30, 0x18	; 24
     d20:	81 50       	subi	r24, 0x01	; 1
     d22:	90 40       	sbci	r25, 0x00	; 0
     d24:	e0 40       	sbci	r30, 0x00	; 0
     d26:	e1 f7       	brne	.-8      	; 0xd20 <__stack+0x4c1>
     d28:	00 c0       	rjmp	.+0      	; 0xd2a <__stack+0x4cb>
     d2a:	00 00       	nop
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
				break;//End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && session_timeout == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
     d2c:	11 11       	cpse	r17, r1
     d2e:	0b c0       	rjmp	.+22     	; 0xd46 <__stack+0x4e7>
     d30:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     d34:	88 23       	and	r24, r24
     d36:	09 f4       	brne	.+2      	; 0xd3a <__stack+0x4db>
     d38:	6a cf       	rjmp	.-300    	; 0xc0e <__stack+0x3af>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					hlcd_writeString("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     d3a:	1e 2d       	mov	r17, r14
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <__stack+0x4e9>
     d3e:	1e 2d       	mov	r17, r14
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <__stack+0x4e9>
     d42:	1e 2d       	mov	r17, r14
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <__stack+0x4e9>
     d46:	1e 2d       	mov	r17, r14
			
		/*************************************************************************************************/
		u8_t show_menu = MAIN_MENU;
		
		
		while(session_timeout!=TRUE)//Show the menu in case of the time is not out
     d48:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
		{
			key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
			switch (show_menu)
     d4c:	41 2f       	mov	r20, r17
     d4e:	50 e0       	ldi	r21, 0x00	; 0
			
		/*************************************************************************************************/
		u8_t show_menu = MAIN_MENU;
		
		
		while(session_timeout!=TRUE)//Show the menu in case of the time is not out
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	09 f0       	breq	.+2      	; 0xd56 <__stack+0x4f7>
     d54:	55 ce       	rjmp	.-854    	; 0xa00 <__stack+0x1a1>
     d56:	42 cd       	rjmp	.-1404   	; 0x7dc <main+0x184>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(200);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
     d58:	17 2d       	mov	r17, r7
     d5a:	f6 cf       	rjmp	.-20     	; 0xd48 <__stack+0x4e9>
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
     d5c:	15 2d       	mov	r17, r5
     d5e:	f4 cf       	rjmp	.-24     	; 0xd48 <__stack+0x4e9>
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
     d60:	16 2d       	mov	r17, r6
     d62:	f2 cf       	rjmp	.-28     	; 0xd48 <__stack+0x4e9>
					}
					else if (key_pressed == MORE_OPTION)//If key pressed is 4
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     d64:	1d 2d       	mov	r17, r13
     d66:	f0 cf       	rjmp	.-32     	; 0xd48 <__stack+0x4e9>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(200);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4)//If key pressed is 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     d68:	14 2d       	mov	r17, r4
     d6a:	ee cf       	rjmp	.-36     	; 0xd48 <__stack+0x4e9>
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
     d6c:	13 2d       	mov	r17, r3
     d6e:	ec cf       	rjmp	.-40     	; 0xd48 <__stack+0x4e9>
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
					{
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
     d70:	1e 2d       	mov	r17, r14
     d72:	ea cf       	rjmp	.-44     	; 0xd48 <__stack+0x4e9>
					}
					else if (key_pressed == RET_OPTION)//If key pressed is 4 (RET)
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     d74:	11 e0       	ldi	r17, 0x01	; 1
     d76:	e8 cf       	rjmp	.-48     	; 0xd48 <__stack+0x4e9>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(200);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
     d78:	18 2d       	mov	r17, r8
     d7a:	e6 cf       	rjmp	.-52     	; 0xd48 <__stack+0x4e9>
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
     d7c:	19 2d       	mov	r17, r9
     d7e:	e4 cf       	rjmp	.-56     	; 0xd48 <__stack+0x4e9>
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     d80:	1d 2d       	mov	r17, r13
     d82:	e2 cf       	rjmp	.-60     	; 0xd48 <__stack+0x4e9>

00000d84 <ui8ComparePass>:

u8_t ui8ComparePass(const u8_t* pass1,const u8_t* pass2,const u8_t size)
{
	u8_t pin_counter=0;//the offset of the character of the pin
	u8_t ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
     d84:	44 23       	and	r20, r20
     d86:	d1 f0       	breq	.+52     	; 0xdbc <ui8ComparePass+0x38>
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
     d88:	fc 01       	movw	r30, r24
     d8a:	30 81       	ld	r19, Z
     d8c:	fb 01       	movw	r30, r22
     d8e:	20 81       	ld	r18, Z
     d90:	32 13       	cpse	r19, r18
     d92:	16 c0       	rjmp	.+44     	; 0xdc0 <ui8ComparePass+0x3c>
     d94:	fc 01       	movw	r30, r24
     d96:	31 96       	adiw	r30, 0x01	; 1
     d98:	db 01       	movw	r26, r22
     d9a:	11 96       	adiw	r26, 0x01	; 1
     d9c:	41 50       	subi	r20, 0x01	; 1
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	4f 5f       	subi	r20, 0xFF	; 255
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	48 0f       	add	r20, r24
     da6:	59 1f       	adc	r21, r25
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <ui8ComparePass+0x2e>
     daa:	21 91       	ld	r18, Z+
     dac:	9d 91       	ld	r25, X+
     dae:	29 13       	cpse	r18, r25
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <ui8ComparePass+0x40>

u8_t ui8ComparePass(const u8_t* pass1,const u8_t* pass2,const u8_t size)
{
	u8_t pin_counter=0;//the offset of the character of the pin
	u8_t ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
     db2:	e4 17       	cp	r30, r20
     db4:	f5 07       	cpc	r31, r21
     db6:	c9 f7       	brne	.-14     	; 0xdaa <ui8ComparePass+0x26>
extern u8_t session_timeout;//stores if the session is still valid or outdated

u8_t ui8ComparePass(const u8_t* pass1,const u8_t* pass2,const u8_t size)
{
	u8_t pin_counter=0;//the offset of the character of the pin
	u8_t ret_value = TRUE;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	08 95       	ret
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	08 95       	ret
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	08 95       	ret
     dc4:	80 e0       	ldi	r24, 0x00	; 0
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}
     dc6:	08 95       	ret

00000dc8 <u8GetKeyPressed>:
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (session_timeout == FALSE));//break the loop in case of valid key or time is out
}

u8_t u8GetKeyPressed(const u8_t u8LoginMode)
{
     dc8:	cf 93       	push	r28
     dca:	c8 2f       	mov	r28, r24
	u8_t key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
	{
		if ( session_counter >= LOGIN_TIMEOUT && u8LoginMode == LOGIN )//check for timeout
     dcc:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <session_counter>
     dd0:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <session_counter+0x1>
     dd4:	88 38       	cpi	r24, 0x88	; 136
     dd6:	93 41       	sbci	r25, 0x13	; 19
     dd8:	38 f0       	brcs	.+14     	; 0xde8 <u8GetKeyPressed+0x20>
     dda:	c1 30       	cpi	r28, 0x01	; 1
     ddc:	29 f4       	brne	.+10     	; 0xde8 <u8GetKeyPressed+0x20>
		{
			session_timeout = TRUE;//set timeout flag to true
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
			break;//break the loop that wait for input from the user
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <u8GetKeyPressed+0x28>
		}
		else
		{
		key_pressed = hkpd_getPressed();//if the user pressed any button in keypad save the value in key_pressed
     de8:	0e 94 76 01 	call	0x2ec	; 0x2ec <hkpd_getPressed>
}

u8_t u8GetKeyPressed(const u8_t u8LoginMode)
{
	u8_t key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     dec:	8f 3f       	cpi	r24, 0xFF	; 255
     dee:	71 f3       	breq	.-36     	; 0xdcc <u8GetKeyPressed+0x4>
		{
		key_pressed = hkpd_getPressed();//if the user pressed any button in keypad save the value in key_pressed
		}
	}
	return key_pressed;
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <vMenuOption>:
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const u8_t u8SelectedRoom,const u8_t u8LoginMode)
{
     df4:	8f 92       	push	r8
     df6:	9f 92       	push	r9
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	d8 2f       	mov	r29, r24
     e0e:	e6 2e       	mov	r14, r22
	u8_t u8StatusCode  = 0;//demand status code
	u8_t u8TurnOnCode  = 0;//turn on the room or the device code
	u8_t u8TurnOffCode = 0;//turn off the device or room
     e10:	00 e0       	ldi	r16, 0x00	; 0
}

void vMenuOption(const u8_t u8SelectedRoom,const u8_t u8LoginMode)
{
	u8_t u8StatusCode  = 0;//demand status code
	u8_t u8TurnOnCode  = 0;//turn on the room or the device code
     e12:	f1 2c       	mov	r15, r1
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const u8_t u8SelectedRoom,const u8_t u8LoginMode)
{
	u8_t u8StatusCode  = 0;//demand status code
     e14:	10 e0       	ldi	r17, 0x00	; 0
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			hlcd_writeString("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
     e16:	0f 2e       	mov	r0, r31
     e18:	f3 e1       	ldi	r31, 0x13	; 19
     e1a:	8f 2e       	mov	r8, r31
     e1c:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			hlcd_writeString("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
     e1e:	0f 2e       	mov	r0, r31
     e20:	f5 e1       	ldi	r31, 0x15	; 21
     e22:	9f 2e       	mov	r9, r31
     e24:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			hlcd_writeString("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
     e26:	0f 2e       	mov	r0, r31
     e28:	f4 e1       	ldi	r31, 0x14	; 20
     e2a:	af 2e       	mov	r10, r31
     e2c:	f0 2d       	mov	r31, r0
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			hlcd_writeString("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
     e2e:	0f 2e       	mov	r0, r31
     e30:	f6 e1       	ldi	r31, 0x16	; 22
     e32:	bf 2e       	mov	r11, r31
     e34:	f0 2d       	mov	r31, r0
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
     e36:	0f 2e       	mov	r0, r31
     e38:	f1 e1       	ldi	r31, 0x11	; 17
     e3a:	cf 2e       	mov	r12, r31
     e3c:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			hlcd_writeString("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
     e3e:	0f 2e       	mov	r0, r31
     e40:	f2 e1       	ldi	r31, 0x12	; 18
     e42:	df 2e       	mov	r13, r31
     e44:	f0 2d       	mov	r31, r0
	u8_t response      = DEFAULT_ACK;//the response of the slave that is sent back based on the command of the master
	u8_t key_pressed   = NOT_PRESSED;//the key that is entered by the user
	
	do
	{
		hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     e46:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
     e4a:	d5 30       	cpi	r29, 0x05	; 5
     e4c:	11 f1       	breq	.+68     	; 0xe92 <vMenuOption+0x9e>
     e4e:	28 f4       	brcc	.+10     	; 0xe5a <vMenuOption+0x66>
     e50:	d3 30       	cpi	r29, 0x03	; 3
     e52:	49 f0       	breq	.+18     	; 0xe66 <vMenuOption+0x72>
     e54:	d4 30       	cpi	r29, 0x04	; 4
     e56:	91 f0       	breq	.+36     	; 0xe7c <vMenuOption+0x88>
     e58:	47 c0       	rjmp	.+142    	; 0xee8 <vMenuOption+0xf4>
     e5a:	d7 30       	cpi	r29, 0x07	; 7
     e5c:	81 f1       	breq	.+96     	; 0xebe <vMenuOption+0xca>
     e5e:	20 f1       	brcs	.+72     	; 0xea8 <vMenuOption+0xb4>
     e60:	d9 30       	cpi	r29, 0x09	; 9
     e62:	c1 f1       	breq	.+112    	; 0xed4 <vMenuOption+0xe0>
     e64:	41 c0       	rjmp	.+130    	; 0xee8 <vMenuOption+0xf4>
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			hlcd_writeString("Room1 S:");
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
     e6e:	01 e3       	ldi	r16, 0x31	; 49
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
     e70:	0f 2e       	mov	r0, r31
     e72:	f1 e2       	ldi	r31, 0x21	; 33
     e74:	ff 2e       	mov	r15, r31
     e76:	f0 2d       	mov	r31, r0
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
     e78:	1c 2d       	mov	r17, r12
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			hlcd_writeString("Room1 S:");
			break;
     e7a:	36 c0       	rjmp	.+108    	; 0xee8 <vMenuOption+0xf4>
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			hlcd_writeString("Room2 S:");
     e7c:	81 ed       	ldi	r24, 0xD1	; 209
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
			hlcd_writeString("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
     e84:	02 e3       	ldi	r16, 0x32	; 50
			u8TurnOffCode = ROOM1_TURN_OFF;
			hlcd_writeString("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
     e86:	0f 2e       	mov	r0, r31
     e88:	f2 e2       	ldi	r31, 0x22	; 34
     e8a:	ff 2e       	mov	r15, r31
     e8c:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			hlcd_writeString("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
     e8e:	1d 2d       	mov	r17, r13
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			hlcd_writeString("Room2 S:");
			break;
     e90:	2b c0       	rjmp	.+86     	; 0xee8 <vMenuOption+0xf4>
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			hlcd_writeString("Room3 S:");
     e92:	8a ed       	ldi	r24, 0xDA	; 218
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
			hlcd_writeString("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
     e9a:	03 e3       	ldi	r16, 0x33	; 51
			u8TurnOffCode = ROOM2_TURN_OFF;
			hlcd_writeString("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
     e9c:	0f 2e       	mov	r0, r31
     e9e:	f3 e2       	ldi	r31, 0x23	; 35
     ea0:	ff 2e       	mov	r15, r31
     ea2:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			hlcd_writeString("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
     ea4:	18 2d       	mov	r17, r8
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			hlcd_writeString("Room3 S:");
			break;
     ea6:	20 c0       	rjmp	.+64     	; 0xee8 <vMenuOption+0xf4>
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			hlcd_writeString("Room4 S:");
     ea8:	83 ee       	ldi	r24, 0xE3	; 227
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
			hlcd_writeString("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
     eb0:	04 e3       	ldi	r16, 0x34	; 52
			u8TurnOffCode = ROOM3_TURN_OFF;
			hlcd_writeString("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
     eb2:	0f 2e       	mov	r0, r31
     eb4:	f4 e2       	ldi	r31, 0x24	; 36
     eb6:	ff 2e       	mov	r15, r31
     eb8:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			hlcd_writeString("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
     eba:	1a 2d       	mov	r17, r10
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			hlcd_writeString("Room4 S:");
			break;
     ebc:	15 c0       	rjmp	.+42     	; 0xee8 <vMenuOption+0xf4>
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			hlcd_writeString("TV S:");
     ebe:	8c ee       	ldi	r24, 0xEC	; 236
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
			hlcd_writeString("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
     ec6:	05 e3       	ldi	r16, 0x35	; 53
			u8TurnOffCode = ROOM4_TURN_OFF;
			hlcd_writeString("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
     ec8:	0f 2e       	mov	r0, r31
     eca:	f5 e2       	ldi	r31, 0x25	; 37
     ecc:	ff 2e       	mov	r15, r31
     ece:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			hlcd_writeString("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
     ed0:	19 2d       	mov	r17, r9
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			hlcd_writeString("TV S:");
			break;
     ed2:	0a c0       	rjmp	.+20     	; 0xee8 <vMenuOption+0xf4>
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
			hlcd_writeString("Air Cond. S:");
     ed4:	82 ef       	ldi	r24, 0xF2	; 242
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
			hlcd_writeString("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
     edc:	06 e3       	ldi	r16, 0x36	; 54
			u8TurnOffCode = TV_TURN_OFF;
			hlcd_writeString("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
     ede:	0f 2e       	mov	r0, r31
     ee0:	f6 e2       	ldi	r31, 0x26	; 38
     ee2:	ff 2e       	mov	r15, r31
     ee4:	f0 2d       	mov	r31, r0
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			hlcd_writeString("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
     ee6:	1b 2d       	mov	r17, r11
			hlcd_writeString("Air Cond. S:");
			break;
		}
		/****************************************************************************************************/
		
		SPI_ui8TransmitRecive(u8StatusCode);//demand the status from the slave
     ee8:	81 2f       	mov	r24, r17
     eea:	0e 94 de 07 	call	0xfbc	; 0xfbc <SPI_ui8TransmitRecive>
     eee:	2f ef       	ldi	r18, 0xFF	; 255
     ef0:	81 ee       	ldi	r24, 0xE1	; 225
     ef2:	94 e0       	ldi	r25, 0x04	; 4
     ef4:	21 50       	subi	r18, 0x01	; 1
     ef6:	80 40       	sbci	r24, 0x00	; 0
     ef8:	90 40       	sbci	r25, 0x00	; 0
     efa:	e1 f7       	brne	.-8      	; 0xef4 <vMenuOption+0x100>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <vMenuOption+0x10a>
     efe:	00 00       	nop
		_delay_ms(100);//Halt the system for the given time in (ms)
		response = SPI_ui8TransmitRecive(DEMAND_RESPONSE);//the master micro controller asks for the status
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	0e 94 de 07 	call	0xfbc	; 0xfbc <SPI_ui8TransmitRecive>
		if(response == ON_STATUS)//if the response from the slave was on status
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	29 f4       	brne	.+10     	; 0xf14 <vMenuOption+0x120>
		{
			hlcd_writeString("ON");//print the status on
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     f12:	04 c0       	rjmp	.+8      	; 0xf1c <vMenuOption+0x128>
		}
		else//if the response from the slave was off status
		{
			hlcd_writeString("OFF");//print the status off
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
		}

		hlcd_setCursor(1,0);//move the cursor to the start of the second line
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	0e 94 06 03 	call	0x60c	; 0x60c <hlcd_setCursor>
		hlcd_writeString("1-On 2-Off 0-RET");//print the sub menu
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
		
		/*******************************************************************************/
		
		key_pressed = u8GetKeyPressed(u8LoginMode);//wait for the user till key is pressed or the time is out
     f2c:	8e 2d       	mov	r24, r14
     f2e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <u8GetKeyPressed>
     f32:	c8 2f       	mov	r28, r24
     f34:	2f ef       	ldi	r18, 0xFF	; 255
     f36:	81 ee       	ldi	r24, 0xE1	; 225
     f38:	94 e0       	ldi	r25, 0x04	; 4
     f3a:	21 50       	subi	r18, 0x01	; 1
     f3c:	80 40       	sbci	r24, 0x00	; 0
     f3e:	90 40       	sbci	r25, 0x00	; 0
     f40:	e1 f7       	brne	.-8      	; 0xf3a <vMenuOption+0x146>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <vMenuOption+0x150>
     f44:	00 00       	nop
		_delay_ms(100);//to avoid the duplication of the pressed key
		
		/*there is no need to take any action in case of the user pressed 0(RET) key
		breaking the loop will be enough since it will be handled in the main*/
		
		if (key_pressed == '1')
     f46:	c1 33       	cpi	r28, 0x31	; 49
     f48:	21 f4       	brne	.+8      	; 0xf52 <vMenuOption+0x15e>
		{
			SPI_ui8TransmitRecive(u8TurnOnCode);//Send turn on signal from master to slave
     f4a:	8f 2d       	mov	r24, r15
     f4c:	0e 94 de 07 	call	0xfbc	; 0xfbc <SPI_ui8TransmitRecive>
     f50:	21 c0       	rjmp	.+66     	; 0xf94 <vMenuOption+0x1a0>
		}
		else if (key_pressed == '2')
     f52:	c2 33       	cpi	r28, 0x32	; 50
     f54:	21 f4       	brne	.+8      	; 0xf5e <vMenuOption+0x16a>
		{
			SPI_ui8TransmitRecive(u8TurnOffCode);//Send turn off signal from master to slave
     f56:	80 2f       	mov	r24, r16
     f58:	0e 94 de 07 	call	0xfbc	; 0xfbc <SPI_ui8TransmitRecive>
     f5c:	1b c0       	rjmp	.+54     	; 0xf94 <vMenuOption+0x1a0>
		}
		else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
     f5e:	cf 3f       	cpi	r28, 0xFF	; 255
     f60:	a1 f0       	breq	.+40     	; 0xf8a <vMenuOption+0x196>
     f62:	c0 33       	cpi	r28, 0x30	; 48
     f64:	b9 f0       	breq	.+46     	; 0xf94 <vMenuOption+0x1a0>
		{
			hlcd_clearLCD();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     f66:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <hlcd_clearLCD>
			hlcd_writeString("Wrong input");//print error message
     f6a:	85 e5       	ldi	r24, 0x55	; 85
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 ed 02 	call	0x5da	; 0x5da <hlcd_writeString>
     f72:	2f ef       	ldi	r18, 0xFF	; 255
     f74:	89 e6       	ldi	r24, 0x69	; 105
     f76:	98 e1       	ldi	r25, 0x18	; 24
     f78:	21 50       	subi	r18, 0x01	; 1
     f7a:	80 40       	sbci	r24, 0x00	; 0
     f7c:	90 40       	sbci	r25, 0x00	; 0
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <vMenuOption+0x184>
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <vMenuOption+0x18e>
     f82:	00 00       	nop
			_delay_ms(500);//Halt the system for the given time in (ms)
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (session_timeout == FALSE));//break the loop in case of valid key or time is out
     f84:	c0 53       	subi	r28, 0x30	; 48
     f86:	c3 30       	cpi	r28, 0x03	; 3
     f88:	28 f0       	brcs	.+10     	; 0xf94 <vMenuOption+0x1a0>
     f8a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     f8e:	88 23       	and	r24, r24
     f90:	09 f4       	brne	.+2      	; 0xf94 <vMenuOption+0x1a0>
     f92:	59 cf       	rjmp	.-334    	; 0xe46 <vMenuOption+0x52>
}
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	ef 90       	pop	r14
     fa0:	df 90       	pop	r13
     fa2:	cf 90       	pop	r12
     fa4:	bf 90       	pop	r11
     fa6:	af 90       	pop	r10
     fa8:	9f 90       	pop	r9
     faa:	8f 90       	pop	r8
     fac:	08 95       	ret

00000fae <SPI_vInitMaster>:
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
	SPCR |= (1<<SPE);//Enable the SPI
     fae:	87 b3       	in	r24, 0x17	; 23
     fb0:	80 6b       	ori	r24, 0xB0	; 176
     fb2:	87 bb       	out	0x17, r24	; 23
     fb4:	8d b1       	in	r24, 0x0d	; 13
     fb6:	81 65       	ori	r24, 0x51	; 81
     fb8:	8d b9       	out	0x0d, r24	; 13
     fba:	08 95       	ret

00000fbc <SPI_ui8TransmitRecive>:
}

u8_t SPI_ui8TransmitRecive (u8_t data)
{
	SPDR = data;//move the given data to SPI Data register
     fbc:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
     fbe:	77 9b       	sbis	0x0e, 7	; 14
     fc0:	fe cf       	rjmp	.-4      	; 0xfbe <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
     fc2:	8f b1       	in	r24, 0x0f	; 15
     fc4:	08 95       	ret

00000fc6 <timer0_initializeCTC>:
/************************************************************************/
void timer0_initializeCTC(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
     fc6:	8e e4       	ldi	r24, 0x4E	; 78
     fc8:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
     fca:	83 b7       	in	r24, 0x33	; 51
     fcc:	88 60       	ori	r24, 0x08	; 8
     fce:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0, WGM00);
     fd0:	83 b7       	in	r24, 0x33	; 51
     fd2:	8f 7b       	andi	r24, 0xBF	; 191
     fd4:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
     fd6:	83 b7       	in	r24, 0x33	; 51
     fd8:	81 60       	ori	r24, 0x01	; 1
     fda:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0, CS01);
     fdc:	83 b7       	in	r24, 0x33	; 51
     fde:	8d 7f       	andi	r24, 0xFD	; 253
     fe0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
     fe2:	83 b7       	in	r24, 0x33	; 51
     fe4:	84 60       	ori	r24, 0x04	; 4
     fe6:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
     fe8:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
     fea:	89 b7       	in	r24, 0x39	; 57
     fec:	82 60       	ori	r24, 0x02	; 2
     fee:	89 bf       	out	0x39, r24	; 57
     ff0:	08 95       	ret

00000ff2 <timer0_stop>:
}

void timer0_stop(void)
{
	//disable the clock to stop the counter
	CLEAR_BIT(TCCR0, CS00);
     ff2:	83 b7       	in	r24, 0x33	; 51
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0, CS01);
     ff8:	83 b7       	in	r24, 0x33	; 51
     ffa:	8d 7f       	andi	r24, 0xFD	; 253
     ffc:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0, CS02);
     ffe:	83 b7       	in	r24, 0x33	; 51
    1000:	8b 7f       	andi	r24, 0xFB	; 251
    1002:	83 bf       	out	0x33, r24	; 51
    1004:	08 95       	ret

00001006 <__tablejump2__>:
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	05 90       	lpm	r0, Z+
    100c:	f4 91       	lpm	r31, Z
    100e:	e0 2d       	mov	r30, r0
    1010:	09 94       	ijmp

00001012 <_exit>:
    1012:	f8 94       	cli

00001014 <__stop_program>:
    1014:	ff cf       	rjmp	.-2      	; 0x1014 <__stop_program>
